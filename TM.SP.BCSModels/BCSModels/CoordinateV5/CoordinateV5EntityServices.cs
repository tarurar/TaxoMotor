// <copyright file="CoordinateV5EntityServices.cs" company="Armd">
// Copyright Armd. All rights reserved.
// </copyright>
// <author>SPDEV\developer</author>
// <date>2014-07-11 19:10:48Z</date>
// <auto-generated>
//   Generated with SharePoint Software Factory 4.1
// </auto-generated>
namespace TM.SP.BCSModels.CoordinateV5
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Data;
    using System.Data.Sql;
    using System.Data.SqlClient;
    using System.Data.SqlTypes;
    using System.Security;
    using System.Runtime.InteropServices;
    using Microsoft.BusinessData;
    using Microsoft.BusinessData.SystemSpecific;
    using Microsoft.SharePoint;
    using TM.Utils;

    // Base class to share connection string retrieval for all entities
    [System.CodeDom.Compiler.GeneratedCode("SPSF", "4.1")]
    public class CoordinateV5Service : IContextProperty
    {
        public Microsoft.BusinessData.Runtime.IExecutionContext ExecutionContext
        {
            get;
            set;
        }

        public Microsoft.BusinessData.MetadataModel.ILobSystemInstance LobSystemInstance
        {
            get;
            set;
        }

        public Microsoft.BusinessData.MetadataModel.IMethodInstance MethodInstance
        {
            get;
            set;
        }

        protected SqlConnection getSqlConnection()
        {
            var secureStoreAppId = BCS.GetLobSystemProperty(this.LobSystemInstance, "SecureStoreAppId");

            var cBuilder = new SqlConnectionStringBuilder()
            {
                DataSource      = BCS.GetLobSystemProperty(this.LobSystemInstance, "DBServerName"),
                InitialCatalog  = BCS.GetLobSystemProperty(this.LobSystemInstance, "DBName"),
                UserID          = Security.GetSecureStoreUserNameCredential(secureStoreAppId),
                Password        = Security.GetSecureStorePasswordCredential(secureStoreAppId)
            };

            return new SqlConnection(cBuilder.ConnectionString);
        }
    }
    /// <summary>
    /// All the methods for retrieving, updating and deleting data are implemented in this class file.
    /// The samples below show the finder and specific finder method for Entity1.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("SPSF", "4.1")]
    public class AddressEntityService : CoordinateV5Service
    {
        public Address ReadAddressItem(System.Int32 Id)
        {
            SqlConnection thisConn = null;
            Address entity = null;

            entity = new Address();
            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.CommandText = "SELECT [Title] , [Country] , [PostalCode] , [Locality] , [Region] , [City] , [Town] , [Street] , [House] , [Building] , [Structure] , [Facility] , [Ownership] , [Flat] , [POBox] , [Okato] , [KladrCode] , [KladrStreetCode] , [OMKDistrictCode] , [OMKRegionCode] , [OMKTownCode] , [OMKStreetCode] , [BTIStreetCode] , [BTIBuildingCode] , [Type] , [Id] , [MessageId] FROM [dbo].[Address] WHERE [Id] = @Id";
            selectCommand.Parameters.AddWithValue("@Id", Id);

            selectCommand.Connection = thisConn;
            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            if (thisReader.Read())
            {
                entity.Title = (System.String)thisReader["Title"];
                entity.Country = (thisReader["Country"] == DBNull.Value) ? null : thisReader["Country"].ToString();
                entity.PostalCode = (thisReader["PostalCode"] == DBNull.Value) ? null : thisReader["PostalCode"].ToString();
                entity.Locality = (thisReader["Locality"] == DBNull.Value) ? null : thisReader["Locality"].ToString();
                entity.Region = (thisReader["Region"] == DBNull.Value) ? null : thisReader["Region"].ToString();
                entity.City = (thisReader["City"] == DBNull.Value) ? null : thisReader["City"].ToString();
                entity.Town = (thisReader["Town"] == DBNull.Value) ? null : thisReader["Town"].ToString();
                entity.Street = (thisReader["Street"] == DBNull.Value) ? null : thisReader["Street"].ToString();
                entity.House = (thisReader["House"] == DBNull.Value) ? null : thisReader["House"].ToString();
                entity.Building = (thisReader["Building"] == DBNull.Value) ? null : thisReader["Building"].ToString();
                entity.Structure = (thisReader["Structure"] == DBNull.Value) ? null : thisReader["Structure"].ToString();
                entity.Facility = (thisReader["Facility"] == DBNull.Value) ? null : thisReader["Facility"].ToString();
                entity.Ownership = (thisReader["Ownership"] == DBNull.Value) ? null : thisReader["Ownership"].ToString();
                entity.Flat = (thisReader["Flat"] == DBNull.Value) ? null : thisReader["Flat"].ToString();
                entity.POBox = (thisReader["POBox"] == DBNull.Value) ? null : thisReader["POBox"].ToString();
                entity.Okato = (thisReader["Okato"] == DBNull.Value) ? null : thisReader["Okato"].ToString();
                entity.KladrCode = (thisReader["KladrCode"] == DBNull.Value) ? null : thisReader["KladrCode"].ToString();
                entity.KladrStreetCode = (thisReader["KladrStreetCode"] == DBNull.Value) ? null : thisReader["KladrStreetCode"].ToString();
                entity.OMKDistrictCode = (thisReader["OMKDistrictCode"] == DBNull.Value) ? null : thisReader["OMKDistrictCode"].ToString();
                entity.OMKRegionCode = (thisReader["OMKRegionCode"] == DBNull.Value) ? null : thisReader["OMKRegionCode"].ToString();
                entity.OMKTownCode = (thisReader["OMKTownCode"] == DBNull.Value) ? null : thisReader["OMKTownCode"].ToString();
                entity.OMKStreetCode = (thisReader["OMKStreetCode"] == DBNull.Value) ? null : thisReader["OMKStreetCode"].ToString();
                entity.BTIStreetCode = (thisReader["BTIStreetCode"] == DBNull.Value) ? null : thisReader["BTIStreetCode"].ToString();
                entity.BTIBuildingCode = (thisReader["BTIBuildingCode"] == DBNull.Value) ? null : thisReader["BTIBuildingCode"].ToString();
                entity.Type = (thisReader["Type"] == DBNull.Value) ? null : thisReader["Type"].ToString();
                entity.Id = (System.Int32)thisReader["Id"];
                entity.MessageId = (System.String)thisReader["MessageId"];
            }
            else
            {
                throw new Exception("Data not found");
            }
            thisReader.Close();
            return (entity);
        }

        public IList<Address> ReadAddressList()
        {
            SqlConnection thisConn = null;
            List<Address> allEntities = new List<Address>();

            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.Connection = thisConn;
            selectCommand.CommandText = "SELECT [Title] , [Country] , [PostalCode] , [Locality] , [Region] , [City] , [Town] , [Street] , [House] , [Building] , [Structure] , [Facility] , [Ownership] , [Flat] , [POBox] , [Okato] , [KladrCode] , [KladrStreetCode] , [OMKDistrictCode] , [OMKRegionCode] , [OMKTownCode] , [OMKStreetCode] , [BTIStreetCode] , [BTIBuildingCode] , [Type] , [Id] , [MessageId] FROM [dbo].[Address]";
            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            while (thisReader.Read())
            {
                Address entity = new Address();

                entity.Title = (System.String)thisReader["Title"];
                entity.Country = (thisReader["Country"] == DBNull.Value) ? null : thisReader["Country"].ToString();
                entity.PostalCode = (thisReader["PostalCode"] == DBNull.Value) ? null : thisReader["PostalCode"].ToString();
                entity.Locality = (thisReader["Locality"] == DBNull.Value) ? null : thisReader["Locality"].ToString();
                entity.Region = (thisReader["Region"] == DBNull.Value) ? null : thisReader["Region"].ToString();
                entity.City = (thisReader["City"] == DBNull.Value) ? null : thisReader["City"].ToString();
                entity.Town = (thisReader["Town"] == DBNull.Value) ? null : thisReader["Town"].ToString();
                entity.Street = (thisReader["Street"] == DBNull.Value) ? null : thisReader["Street"].ToString();
                entity.House = (thisReader["House"] == DBNull.Value) ? null : thisReader["House"].ToString();
                entity.Building = (thisReader["Building"] == DBNull.Value) ? null : thisReader["Building"].ToString();
                entity.Structure = (thisReader["Structure"] == DBNull.Value) ? null : thisReader["Structure"].ToString();
                entity.Facility = (thisReader["Facility"] == DBNull.Value) ? null : thisReader["Facility"].ToString();
                entity.Ownership = (thisReader["Ownership"] == DBNull.Value) ? null : thisReader["Ownership"].ToString();
                entity.Flat = (thisReader["Flat"] == DBNull.Value) ? null : thisReader["Flat"].ToString();
                entity.POBox = (thisReader["POBox"] == DBNull.Value) ? null : thisReader["POBox"].ToString();
                entity.Okato = (thisReader["Okato"] == DBNull.Value) ? null : thisReader["Okato"].ToString();
                entity.KladrCode = (thisReader["KladrCode"] == DBNull.Value) ? null : thisReader["KladrCode"].ToString();
                entity.KladrStreetCode = (thisReader["KladrStreetCode"] == DBNull.Value) ? null : thisReader["KladrStreetCode"].ToString();
                entity.OMKDistrictCode = (thisReader["OMKDistrictCode"] == DBNull.Value) ? null : thisReader["OMKDistrictCode"].ToString();
                entity.OMKRegionCode = (thisReader["OMKRegionCode"] == DBNull.Value) ? null : thisReader["OMKRegionCode"].ToString();
                entity.OMKTownCode = (thisReader["OMKTownCode"] == DBNull.Value) ? null : thisReader["OMKTownCode"].ToString();
                entity.OMKStreetCode = (thisReader["OMKStreetCode"] == DBNull.Value) ? null : thisReader["OMKStreetCode"].ToString();
                entity.BTIStreetCode = (thisReader["BTIStreetCode"] == DBNull.Value) ? null : thisReader["BTIStreetCode"].ToString();
                entity.BTIBuildingCode = (thisReader["BTIBuildingCode"] == DBNull.Value) ? null : thisReader["BTIBuildingCode"].ToString();
                entity.Type = (thisReader["Type"] == DBNull.Value) ? null : thisReader["Type"].ToString();
                entity.Id = (System.Int32)thisReader["Id"];
                entity.MessageId = (System.String)thisReader["MessageId"];

                allEntities.Add(entity);
            }
            thisReader.Close();
            return allEntities;
        }

        public Address CreateAddress(Address newentity)
        {
            Address createdEntity = null;
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                SqlCommand createCommand = new SqlCommand();
                createCommand.Connection = thisConn;
                createCommand.CommandText = "INSERT INTO [dbo].[Address] ([Title] , [Country] , [PostalCode] , [Locality] , [Region] , [City] , [Town] , [Street] , [House] , [Building] , [Structure] , [Facility] , [Ownership] , [Flat] , [POBox] , [Okato] , [KladrCode] , [KladrStreetCode] , [OMKDistrictCode] , [OMKRegionCode] , [OMKTownCode] , [OMKStreetCode] , [BTIStreetCode] , [BTIBuildingCode] , [Type] , [MessageId] , [Author]) VALUES (@Title , @Country , @PostalCode , @Locality , @Region , @City , @Town , @Street , @House , @Building , @Structure , @Facility , @Ownership , @Flat , @POBox , @Okato , @KladrCode , @KladrStreetCode , @OMKDistrictCode , @OMKRegionCode , @OMKTownCode , @OMKStreetCode , @BTIStreetCode , @BTIBuildingCode , @Type , @MessageId , @Author) SELECT [Title] , [Country] , [PostalCode] , [Locality] , [Region] , [City] , [Town] , [Street] , [House] , [Building] , [Structure] , [Facility] , [Ownership] , [Flat] , [POBox] , [Okato] , [KladrCode] , [KladrStreetCode] , [OMKDistrictCode] , [OMKRegionCode] , [OMKTownCode] , [OMKStreetCode] , [BTIStreetCode] , [BTIBuildingCode] , [Type] , [Id] , [MessageId] FROM [dbo].[Address] WHERE [Id] = SCOPE_IDENTITY()";
                createCommand.Parameters.AddWithValue("@Title", newentity.Title);
                createCommand.Parameters.AddWithValue("@Country", (newentity.Country == null) ? (object)DBNull.Value : newentity.Country);
                createCommand.Parameters.AddWithValue("@PostalCode", (newentity.PostalCode == null) ? (object)DBNull.Value : newentity.PostalCode);
                createCommand.Parameters.AddWithValue("@Locality", (newentity.Locality == null) ? (object)DBNull.Value : newentity.Locality);
                createCommand.Parameters.AddWithValue("@Region", (newentity.Region == null) ? (object)DBNull.Value : newentity.Region);
                createCommand.Parameters.AddWithValue("@City", (newentity.City == null) ? (object)DBNull.Value : newentity.City);
                createCommand.Parameters.AddWithValue("@Town", (newentity.Town == null) ? (object)DBNull.Value : newentity.Town);
                createCommand.Parameters.AddWithValue("@Street", (newentity.Street == null) ? (object)DBNull.Value : newentity.Street);
                createCommand.Parameters.AddWithValue("@House", (newentity.House == null) ? (object)DBNull.Value : newentity.House);
                createCommand.Parameters.AddWithValue("@Building", (newentity.Building == null) ? (object)DBNull.Value : newentity.Building);
                createCommand.Parameters.AddWithValue("@Structure", (newentity.Structure == null) ? (object)DBNull.Value : newentity.Structure);
                createCommand.Parameters.AddWithValue("@Facility", (newentity.Facility == null) ? (object)DBNull.Value : newentity.Facility);
                createCommand.Parameters.AddWithValue("@Ownership", (newentity.Ownership == null) ? (object)DBNull.Value : newentity.Ownership);
                createCommand.Parameters.AddWithValue("@Flat", (newentity.Flat == null) ? (object)DBNull.Value : newentity.Flat);
                createCommand.Parameters.AddWithValue("@POBox", (newentity.POBox == null) ? (object)DBNull.Value : newentity.POBox);
                createCommand.Parameters.AddWithValue("@Okato", (newentity.Okato == null) ? (object)DBNull.Value : newentity.Okato);
                createCommand.Parameters.AddWithValue("@KladrCode", (newentity.KladrCode == null) ? (object)DBNull.Value : newentity.KladrCode);
                createCommand.Parameters.AddWithValue("@KladrStreetCode", (newentity.KladrStreetCode == null) ? (object)DBNull.Value : newentity.KladrStreetCode);
                createCommand.Parameters.AddWithValue("@OMKDistrictCode", (newentity.OMKDistrictCode == null) ? (object)DBNull.Value : newentity.OMKDistrictCode);
                createCommand.Parameters.AddWithValue("@OMKRegionCode", (newentity.OMKRegionCode == null) ? (object)DBNull.Value : newentity.OMKRegionCode);
                createCommand.Parameters.AddWithValue("@OMKTownCode", (newentity.OMKTownCode == null) ? (object)DBNull.Value : newentity.OMKTownCode);
                createCommand.Parameters.AddWithValue("@OMKStreetCode", (newentity.OMKStreetCode == null) ? (object)DBNull.Value : newentity.OMKStreetCode);
                createCommand.Parameters.AddWithValue("@BTIStreetCode", (newentity.BTIStreetCode == null) ? (object)DBNull.Value : newentity.BTIStreetCode);
                createCommand.Parameters.AddWithValue("@BTIBuildingCode", (newentity.BTIBuildingCode == null) ? (object)DBNull.Value : newentity.BTIBuildingCode);
                createCommand.Parameters.AddWithValue("@Type", (newentity.Type == null) ? (object)DBNull.Value : newentity.Type);
                createCommand.Parameters.AddWithValue("@Id", newentity.Id);
                createCommand.Parameters.AddWithValue("@MessageId", newentity.MessageId);
                createCommand.Parameters.AddWithValue("@Author", SPContext.Current != null ? SPContext.Current.Web.CurrentUser.LoginName : (object)DBNull.Value);


                SqlDataReader thisReader = createCommand.ExecuteReader(CommandBehavior.CloseConnection);
                if (thisReader.Read())
                {
                    createdEntity = new Address();

                    createdEntity.Title = (System.String)thisReader["Title"];
                    createdEntity.Country = (thisReader["Country"] == DBNull.Value) ? null : thisReader["Country"].ToString();
                    createdEntity.PostalCode = (thisReader["PostalCode"] == DBNull.Value) ? null : thisReader["PostalCode"].ToString();
                    createdEntity.Locality = (thisReader["Locality"] == DBNull.Value) ? null : thisReader["Locality"].ToString();
                    createdEntity.Region = (thisReader["Region"] == DBNull.Value) ? null : thisReader["Region"].ToString();
                    createdEntity.City = (thisReader["City"] == DBNull.Value) ? null : thisReader["City"].ToString();
                    createdEntity.Town = (thisReader["Town"] == DBNull.Value) ? null : thisReader["Town"].ToString();
                    createdEntity.Street = (thisReader["Street"] == DBNull.Value) ? null : thisReader["Street"].ToString();
                    createdEntity.House = (thisReader["House"] == DBNull.Value) ? null : thisReader["House"].ToString();
                    createdEntity.Building = (thisReader["Building"] == DBNull.Value) ? null : thisReader["Building"].ToString();
                    createdEntity.Structure = (thisReader["Structure"] == DBNull.Value) ? null : thisReader["Structure"].ToString();
                    createdEntity.Facility = (thisReader["Facility"] == DBNull.Value) ? null : thisReader["Facility"].ToString();
                    createdEntity.Ownership = (thisReader["Ownership"] == DBNull.Value) ? null : thisReader["Ownership"].ToString();
                    createdEntity.Flat = (thisReader["Flat"] == DBNull.Value) ? null : thisReader["Flat"].ToString();
                    createdEntity.POBox = (thisReader["POBox"] == DBNull.Value) ? null : thisReader["POBox"].ToString();
                    createdEntity.Okato = (thisReader["Okato"] == DBNull.Value) ? null : thisReader["Okato"].ToString();
                    createdEntity.KladrCode = (thisReader["KladrCode"] == DBNull.Value) ? null : thisReader["KladrCode"].ToString();
                    createdEntity.KladrStreetCode = (thisReader["KladrStreetCode"] == DBNull.Value) ? null : thisReader["KladrStreetCode"].ToString();
                    createdEntity.OMKDistrictCode = (thisReader["OMKDistrictCode"] == DBNull.Value) ? null : thisReader["OMKDistrictCode"].ToString();
                    createdEntity.OMKRegionCode = (thisReader["OMKRegionCode"] == DBNull.Value) ? null : thisReader["OMKRegionCode"].ToString();
                    createdEntity.OMKTownCode = (thisReader["OMKTownCode"] == DBNull.Value) ? null : thisReader["OMKTownCode"].ToString();
                    createdEntity.OMKStreetCode = (thisReader["OMKStreetCode"] == DBNull.Value) ? null : thisReader["OMKStreetCode"].ToString();
                    createdEntity.BTIStreetCode = (thisReader["BTIStreetCode"] == DBNull.Value) ? null : thisReader["BTIStreetCode"].ToString();
                    createdEntity.BTIBuildingCode = (thisReader["BTIBuildingCode"] == DBNull.Value) ? null : thisReader["BTIBuildingCode"].ToString();
                    createdEntity.Type = (thisReader["Type"] == DBNull.Value) ? null : thisReader["Type"].ToString();
                    createdEntity.Id = (System.Int32)thisReader["Id"];
                    createdEntity.MessageId = (System.String)thisReader["MessageId"];
                }
                else
                {
                    throw new Exception("Data not found");
                }
                return createdEntity;
            }
            finally
            {
                thisConn.Dispose();
            }
        }

        public void DeleteAddress(System.Int32 Id)
        {
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                SqlCommand deleteCommand = new SqlCommand();
                deleteCommand.Connection = thisConn;
                deleteCommand.CommandText = "DELETE FROM [dbo].[Address] WHERE [Id] = @Id";
                deleteCommand.Parameters.AddWithValue("@Id", Id);
                deleteCommand.ExecuteNonQuery();
            }
            finally
            {
                thisConn.Dispose();
            }

        }


        public void UpdateAddress(Address updateAddress)
        {
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                SqlCommand updateCommand = new SqlCommand();
                updateCommand.Connection = thisConn;
                updateCommand.CommandText = "UPDATE [dbo].[Address] SET [Title] = @Title , [Country] = @Country , [PostalCode] = @PostalCode , [Locality] = @Locality , [Region] = @Region , [City] = @City , [Town] = @Town , [Street] = @Street , [House] = @House , [Building] = @Building , [Structure] = @Structure , [Facility] = @Facility , [Ownership] = @Ownership , [Flat] = @Flat , [POBox] = @POBox , [Okato] = @Okato , [KladrCode] = @KladrCode , [KladrStreetCode] = @KladrStreetCode , [OMKDistrictCode] = @OMKDistrictCode , [OMKRegionCode] = @OMKRegionCode , [OMKTownCode] = @OMKTownCode , [OMKStreetCode] = @OMKStreetCode , [BTIStreetCode] = @BTIStreetCode , [BTIBuildingCode] = @BTIBuildingCode , [Type] = @Type , [MessageId] = @MessageId , [Author] = @Author WHERE [Id] = @Id";

                //add new field values
                updateCommand.Parameters.AddWithValue("@Title", updateAddress.Title);
                updateCommand.Parameters.AddWithValue("@Country", (updateAddress.Country == null) ? (object)DBNull.Value : updateAddress.Country);
                updateCommand.Parameters.AddWithValue("@PostalCode", (updateAddress.PostalCode == null) ? (object)DBNull.Value : updateAddress.PostalCode);
                updateCommand.Parameters.AddWithValue("@Locality", (updateAddress.Locality == null) ? (object)DBNull.Value : updateAddress.Locality);
                updateCommand.Parameters.AddWithValue("@Region", (updateAddress.Region == null) ? (object)DBNull.Value : updateAddress.Region);
                updateCommand.Parameters.AddWithValue("@City", (updateAddress.City == null) ? (object)DBNull.Value : updateAddress.City);
                updateCommand.Parameters.AddWithValue("@Town", (updateAddress.Town == null) ? (object)DBNull.Value : updateAddress.Town);
                updateCommand.Parameters.AddWithValue("@Street", (updateAddress.Street == null) ? (object)DBNull.Value : updateAddress.Street);
                updateCommand.Parameters.AddWithValue("@House", (updateAddress.House == null) ? (object)DBNull.Value : updateAddress.House);
                updateCommand.Parameters.AddWithValue("@Building", (updateAddress.Building == null) ? (object)DBNull.Value : updateAddress.Building);
                updateCommand.Parameters.AddWithValue("@Structure", (updateAddress.Structure == null) ? (object)DBNull.Value : updateAddress.Structure);
                updateCommand.Parameters.AddWithValue("@Facility", (updateAddress.Facility == null) ? (object)DBNull.Value : updateAddress.Facility);
                updateCommand.Parameters.AddWithValue("@Ownership", (updateAddress.Ownership == null) ? (object)DBNull.Value : updateAddress.Ownership);
                updateCommand.Parameters.AddWithValue("@Flat", (updateAddress.Flat == null) ? (object)DBNull.Value : updateAddress.Flat);
                updateCommand.Parameters.AddWithValue("@POBox", (updateAddress.POBox == null) ? (object)DBNull.Value : updateAddress.POBox);
                updateCommand.Parameters.AddWithValue("@Okato", (updateAddress.Okato == null) ? (object)DBNull.Value : updateAddress.Okato);
                updateCommand.Parameters.AddWithValue("@KladrCode", (updateAddress.KladrCode == null) ? (object)DBNull.Value : updateAddress.KladrCode);
                updateCommand.Parameters.AddWithValue("@KladrStreetCode", (updateAddress.KladrStreetCode == null) ? (object)DBNull.Value : updateAddress.KladrStreetCode);
                updateCommand.Parameters.AddWithValue("@OMKDistrictCode", (updateAddress.OMKDistrictCode == null) ? (object)DBNull.Value : updateAddress.OMKDistrictCode);
                updateCommand.Parameters.AddWithValue("@OMKRegionCode", (updateAddress.OMKRegionCode == null) ? (object)DBNull.Value : updateAddress.OMKRegionCode);
                updateCommand.Parameters.AddWithValue("@OMKTownCode", (updateAddress.OMKTownCode == null) ? (object)DBNull.Value : updateAddress.OMKTownCode);
                updateCommand.Parameters.AddWithValue("@OMKStreetCode", (updateAddress.OMKStreetCode == null) ? (object)DBNull.Value : updateAddress.OMKStreetCode);
                updateCommand.Parameters.AddWithValue("@BTIStreetCode", (updateAddress.BTIStreetCode == null) ? (object)DBNull.Value : updateAddress.BTIStreetCode);
                updateCommand.Parameters.AddWithValue("@BTIBuildingCode", (updateAddress.BTIBuildingCode == null) ? (object)DBNull.Value : updateAddress.BTIBuildingCode);
                updateCommand.Parameters.AddWithValue("@Type", (updateAddress.Type == null) ? (object)DBNull.Value : updateAddress.Type);
                updateCommand.Parameters.AddWithValue("@MessageId", updateAddress.MessageId);
                updateCommand.Parameters.AddWithValue("@Author", SPContext.Current != null ? SPContext.Current.Web.CurrentUser.LoginName : (object)DBNull.Value);

                updateCommand.Parameters.AddWithValue("@Id", updateAddress.Id);

                updateCommand.ExecuteNonQuery();
            }
            finally
            {
                thisConn.Dispose();
            }
        }
        public IList<RequestAccount> IdOfAddressToPostalAddressOfRequestAccount(System.Nullable<System.Int32> PostalAddress)
        {
            SqlConnection thisConn = null;
            List<RequestAccount> allEntities = new List<RequestAccount>();

            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.Connection = thisConn;
            selectCommand.CommandText = "SELECT [Title] , [FullName] , [Name] , [BrandName] , [Brand] , [Ogrn] , [OgrnAuthority] , [OgrnAuthorityAddress] , [OgrnNum] , [OgrnDate] , [Inn] , [InnAuthority] , [InnNum] , [InnDate] , [Kpp] , [Okpo] , [OrgFormCode] , [Okved] , [Okfs] , [BankName] , [BankBik] , [CorrAccount] , [SetAccount] , [Phone] , [Fax] , [EMail] , [WebSite] , [Id] , [MessageId] , [PostalAddress] , [FactAddress] , [RequestContact], [SingleStrPostalAddress], [SingleStrFactAddress] FROM [dbo].[RequestAccount] WHERE [PostalAddress] = @PostalAddress";

            selectCommand.Parameters.AddWithValue("@PostalAddress", PostalAddress);

            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            while (thisReader.Read())
            {
                RequestAccount entity = new RequestAccount();

                entity.Title = (thisReader["Title"] == DBNull.Value) ? null : thisReader["Title"].ToString();
                entity.FullName = (thisReader["FullName"] == DBNull.Value) ? null : thisReader["FullName"].ToString();
                entity.Name = (thisReader["Name"] == DBNull.Value) ? null : thisReader["Name"].ToString();
                entity.BrandName = (thisReader["BrandName"] == DBNull.Value) ? null : thisReader["BrandName"].ToString();
                entity.Brand = (thisReader["Brand"] == DBNull.Value) ? null : thisReader["Brand"].ToString();
                entity.Ogrn = (thisReader["Ogrn"] == DBNull.Value) ? null : thisReader["Ogrn"].ToString();
                entity.OgrnAuthority = (thisReader["OgrnAuthority"] == DBNull.Value) ? null : thisReader["OgrnAuthority"].ToString();
                entity.OgrnAuthorityAddress = (thisReader["OgrnAuthorityAddress"] == DBNull.Value) ? null : thisReader["OgrnAuthorityAddress"].ToString();
                entity.OgrnNum = (thisReader["OgrnNum"] == DBNull.Value) ? null : thisReader["OgrnNum"].ToString();
                entity.OgrnDate = thisReader["OgrnDate"] as System.Nullable<System.DateTime>;
                entity.Inn = (thisReader["Inn"] == DBNull.Value) ? null : thisReader["Inn"].ToString();
                entity.InnAuthority = (thisReader["InnAuthority"] == DBNull.Value) ? null : thisReader["InnAuthority"].ToString();
                entity.InnNum = (thisReader["InnNum"] == DBNull.Value) ? null : thisReader["InnNum"].ToString();
                entity.InnDate = thisReader["InnDate"] as System.Nullable<System.DateTime>;
                entity.Kpp = (thisReader["Kpp"] == DBNull.Value) ? null : thisReader["Kpp"].ToString();
                entity.Okpo = (thisReader["Okpo"] == DBNull.Value) ? null : thisReader["Okpo"].ToString();
                entity.OrgFormCode = (thisReader["OrgFormCode"] == DBNull.Value) ? null : thisReader["OrgFormCode"].ToString();
                entity.Okved = (thisReader["Okved"] == DBNull.Value) ? null : thisReader["Okved"].ToString();
                entity.Okfs = (thisReader["Okfs"] == DBNull.Value) ? null : thisReader["Okfs"].ToString();
                entity.BankName = (thisReader["BankName"] == DBNull.Value) ? null : thisReader["BankName"].ToString();
                entity.BankBik = (thisReader["BankBik"] == DBNull.Value) ? null : thisReader["BankBik"].ToString();
                entity.CorrAccount = (thisReader["CorrAccount"] == DBNull.Value) ? null : thisReader["CorrAccount"].ToString();
                entity.SetAccount = (thisReader["SetAccount"] == DBNull.Value) ? null : thisReader["SetAccount"].ToString();
                entity.Phone = (thisReader["Phone"] == DBNull.Value) ? null : thisReader["Phone"].ToString();
                entity.Fax = (thisReader["Fax"] == DBNull.Value) ? null : thisReader["Fax"].ToString();
                entity.EMail = (thisReader["EMail"] == DBNull.Value) ? null : thisReader["EMail"].ToString();
                entity.WebSite = (thisReader["WebSite"] == DBNull.Value) ? null : thisReader["WebSite"].ToString();
                entity.Id = (System.Int32)thisReader["Id"];
                entity.MessageId = (System.String)thisReader["MessageId"];
                entity.PostalAddress = thisReader["PostalAddress"] as System.Nullable<System.Int32>;
                entity.FactAddress = thisReader["FactAddress"] as System.Nullable<System.Int32>;
                entity.RequestContact = thisReader["RequestContact"] as System.Nullable<System.Int32>;
                entity.SingleStrPostalAddress = (thisReader["SingleStrPostalAddress"] == DBNull.Value) ? null : thisReader["SingleStrPostalAddress"].ToString();
                entity.SingleStrFactAddress = (thisReader["SingleStrFactAddress"] == DBNull.Value) ? null : thisReader["SingleStrFactAddress"].ToString();

                allEntities.Add(entity);
            }
            thisReader.Close();
            return allEntities;
        }
        public IList<RequestAccount> IdOfAddressToFactAddressOfRequestAccount(System.Nullable<System.Int32> FactAddress)
        {
            SqlConnection thisConn = null;
            List<RequestAccount> allEntities = new List<RequestAccount>();

            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.Connection = thisConn;
            selectCommand.CommandText = "SELECT [Title] , [FullName] , [Name] , [BrandName] , [Brand] , [Ogrn] , [OgrnAuthority] , [OgrnAuthorityAddress] , [OgrnNum] , [OgrnDate] , [Inn] , [InnAuthority] , [InnNum] , [InnDate] , [Kpp] , [Okpo] , [OrgFormCode] , [Okved] , [Okfs] , [BankName] , [BankBik] , [CorrAccount] , [SetAccount] , [Phone] , [Fax] , [EMail] , [WebSite] , [Id] , [MessageId] , [PostalAddress] , [FactAddress] , [RequestContact], [SingleStrPostalAddress], [SingleStrFactAddress] FROM [dbo].[RequestAccount] WHERE [FactAddress] = @FactAddress";

            selectCommand.Parameters.AddWithValue("@FactAddress", FactAddress);

            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            while (thisReader.Read())
            {
                RequestAccount entity = new RequestAccount();

                entity.Title = (thisReader["Title"] == DBNull.Value) ? null : thisReader["Title"].ToString();
                entity.FullName = (thisReader["FullName"] == DBNull.Value) ? null : thisReader["FullName"].ToString();
                entity.Name = (thisReader["Name"] == DBNull.Value) ? null : thisReader["Name"].ToString();
                entity.BrandName = (thisReader["BrandName"] == DBNull.Value) ? null : thisReader["BrandName"].ToString();
                entity.Brand = (thisReader["Brand"] == DBNull.Value) ? null : thisReader["Brand"].ToString();
                entity.Ogrn = (thisReader["Ogrn"] == DBNull.Value) ? null : thisReader["Ogrn"].ToString();
                entity.OgrnAuthority = (thisReader["OgrnAuthority"] == DBNull.Value) ? null : thisReader["OgrnAuthority"].ToString();
                entity.OgrnAuthorityAddress = (thisReader["OgrnAuthorityAddress"] == DBNull.Value) ? null : thisReader["OgrnAuthorityAddress"].ToString();
                entity.OgrnNum = (thisReader["OgrnNum"] == DBNull.Value) ? null : thisReader["OgrnNum"].ToString();
                entity.OgrnDate = thisReader["OgrnDate"] as System.Nullable<System.DateTime>;
                entity.Inn = (thisReader["Inn"] == DBNull.Value) ? null : thisReader["Inn"].ToString();
                entity.InnAuthority = (thisReader["InnAuthority"] == DBNull.Value) ? null : thisReader["InnAuthority"].ToString();
                entity.InnNum = (thisReader["InnNum"] == DBNull.Value) ? null : thisReader["InnNum"].ToString();
                entity.InnDate = thisReader["InnDate"] as System.Nullable<System.DateTime>;
                entity.Kpp = (thisReader["Kpp"] == DBNull.Value) ? null : thisReader["Kpp"].ToString();
                entity.Okpo = (thisReader["Okpo"] == DBNull.Value) ? null : thisReader["Okpo"].ToString();
                entity.OrgFormCode = (thisReader["OrgFormCode"] == DBNull.Value) ? null : thisReader["OrgFormCode"].ToString();
                entity.Okved = (thisReader["Okved"] == DBNull.Value) ? null : thisReader["Okved"].ToString();
                entity.Okfs = (thisReader["Okfs"] == DBNull.Value) ? null : thisReader["Okfs"].ToString();
                entity.BankName = (thisReader["BankName"] == DBNull.Value) ? null : thisReader["BankName"].ToString();
                entity.BankBik = (thisReader["BankBik"] == DBNull.Value) ? null : thisReader["BankBik"].ToString();
                entity.CorrAccount = (thisReader["CorrAccount"] == DBNull.Value) ? null : thisReader["CorrAccount"].ToString();
                entity.SetAccount = (thisReader["SetAccount"] == DBNull.Value) ? null : thisReader["SetAccount"].ToString();
                entity.Phone = (thisReader["Phone"] == DBNull.Value) ? null : thisReader["Phone"].ToString();
                entity.Fax = (thisReader["Fax"] == DBNull.Value) ? null : thisReader["Fax"].ToString();
                entity.EMail = (thisReader["EMail"] == DBNull.Value) ? null : thisReader["EMail"].ToString();
                entity.WebSite = (thisReader["WebSite"] == DBNull.Value) ? null : thisReader["WebSite"].ToString();
                entity.Id = (System.Int32)thisReader["Id"];
                entity.MessageId = (System.String)thisReader["MessageId"];
                entity.PostalAddress = thisReader["PostalAddress"] as System.Nullable<System.Int32>;
                entity.FactAddress = thisReader["FactAddress"] as System.Nullable<System.Int32>;
                entity.RequestContact = thisReader["RequestContact"] as System.Nullable<System.Int32>;
                entity.SingleStrPostalAddress = (thisReader["SingleStrPostalAddress"] == DBNull.Value) ? null : thisReader["SingleStrPostalAddress"].ToString();
                entity.SingleStrFactAddress = (thisReader["SingleStrFactAddress"] == DBNull.Value) ? null : thisReader["SingleStrFactAddress"].ToString();

                allEntities.Add(entity);
            }
            thisReader.Close();
            return allEntities;
        }
        public IList<RequestContact> IdOfAddressToRegAddressOfRequestContact(System.Nullable<System.Int32> RegAddress)
        {
            SqlConnection thisConn = null;
            List<RequestContact> allEntities = new List<RequestContact>();

            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.Connection = thisConn;
            selectCommand.CommandText = "SELECT [Id] , [Title] , [LastName] , [FirstName] , [MiddleName] , [Gender] , [BirthDate] , [Snils] , [Inn] , [MobilePhone] , [WorkPhone] , [HomePhone] , [EMail] , [Nation] , [Citizenship] , [CitizenshipType] , [JobTitle] , [OMSNum] , [OMSDate] , [OMSCompany] , [OMSValidityPeriod] , [IsiId] , [Id_Auto] , [MessageId] , [RegAddress] , [FactAddress] , [BirthAddress], [SingleStrRegAddress], [SingleStrFactAddress], [SingleStrBirthAddress] FROM [dbo].[RequestContact] WHERE [RegAddress] = @RegAddress";

            selectCommand.Parameters.AddWithValue("@RegAddress", RegAddress);

            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            while (thisReader.Read())
            {
                RequestContact entity = new RequestContact();

                entity.Id = (thisReader["Id"] == DBNull.Value) ? null : thisReader["Id"].ToString();
                entity.Title = (System.String)thisReader["Title"];
                entity.LastName = (thisReader["LastName"] == DBNull.Value) ? null : thisReader["LastName"].ToString();
                entity.FirstName = (thisReader["FirstName"] == DBNull.Value) ? null : thisReader["FirstName"].ToString();
                entity.MiddleName = (thisReader["MiddleName"] == DBNull.Value) ? null : thisReader["MiddleName"].ToString();
                entity.Gender = (thisReader["Gender"] == DBNull.Value) ? null : thisReader["Gender"].ToString();
                entity.BirthDate = thisReader["BirthDate"] as System.Nullable<System.DateTime>;
                entity.Snils = (thisReader["Snils"] == DBNull.Value) ? null : thisReader["Snils"].ToString();
                entity.Inn = (thisReader["Inn"] == DBNull.Value) ? null : thisReader["Inn"].ToString();
                entity.MobilePhone = (thisReader["MobilePhone"] == DBNull.Value) ? null : thisReader["MobilePhone"].ToString();
                entity.WorkPhone = (thisReader["WorkPhone"] == DBNull.Value) ? null : thisReader["WorkPhone"].ToString();
                entity.HomePhone = (thisReader["HomePhone"] == DBNull.Value) ? null : thisReader["HomePhone"].ToString();
                entity.EMail = (thisReader["EMail"] == DBNull.Value) ? null : thisReader["EMail"].ToString();
                entity.Nation = (thisReader["Nation"] == DBNull.Value) ? null : thisReader["Nation"].ToString();
                entity.Citizenship = (thisReader["Citizenship"] == DBNull.Value) ? null : thisReader["Citizenship"].ToString();
                entity.CitizenshipType = (thisReader["CitizenshipType"] == DBNull.Value) ? null : thisReader["CitizenshipType"].ToString();
                entity.JobTitle = (thisReader["JobTitle"] == DBNull.Value) ? null : thisReader["JobTitle"].ToString();
                entity.OMSNum = (thisReader["OMSNum"] == DBNull.Value) ? null : thisReader["OMSNum"].ToString();
                entity.OMSDate = thisReader["OMSDate"] as System.Nullable<System.DateTime>;
                entity.OMSCompany = (thisReader["OMSCompany"] == DBNull.Value) ? null : thisReader["OMSCompany"].ToString();
                entity.OMSValidityPeriod = (thisReader["OMSValidityPeriod"] == DBNull.Value) ? null : thisReader["OMSValidityPeriod"].ToString();
                entity.IsiId = (thisReader["IsiId"] == DBNull.Value) ? null : thisReader["IsiId"].ToString();
                entity.Id_Auto = (System.Int32)thisReader["Id_Auto"];
                entity.MessageId = (System.String)thisReader["MessageId"];
                entity.RegAddress = thisReader["RegAddress"] as System.Nullable<System.Int32>;
                entity.FactAddress = thisReader["FactAddress"] as System.Nullable<System.Int32>;
                entity.BirthAddress = thisReader["BirthAddress"] as System.Nullable<System.Int32>;
                entity.SingleStrRegAddress = (thisReader["SingleStrRegAddress"] == DBNull.Value) ? null : thisReader["SingleStrRegAddress"].ToString();
                entity.SingleStrFactAddress = (thisReader["SingleStrFactAddress"] == DBNull.Value) ? null : thisReader["SingleStrFactAddress"].ToString();
                entity.SingleStrBirthAddress = (thisReader["SingleStrBirthAddress"] == DBNull.Value) ? null : thisReader["SingleStrBirthAddress"].ToString();

                allEntities.Add(entity);
            }
            thisReader.Close();
            return allEntities;
        }
        public IList<RequestContact> IdOfAddressToFactAddressOfRequestContact(System.Nullable<System.Int32> FactAddress)
        {
            SqlConnection thisConn = null;
            List<RequestContact> allEntities = new List<RequestContact>();

            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.Connection = thisConn;
            selectCommand.CommandText = "SELECT [Id] , [Title] , [LastName] , [FirstName] , [MiddleName] , [Gender] , [BirthDate] , [Snils] , [Inn] , [MobilePhone] , [WorkPhone] , [HomePhone] , [EMail] , [Nation] , [Citizenship] , [CitizenshipType] , [JobTitle] , [OMSNum] , [OMSDate] , [OMSCompany] , [OMSValidityPeriod] , [IsiId] , [Id_Auto] , [MessageId] , [RegAddress] , [FactAddress] , [BirthAddress], [SingleStrRegAddress], [SingleStrFactAddress], [SingleStrBirthAddress] FROM [dbo].[RequestContact] WHERE [FactAddress] = @FactAddress";

            selectCommand.Parameters.AddWithValue("@FactAddress", FactAddress);

            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            while (thisReader.Read())
            {
                RequestContact entity = new RequestContact();

                entity.Id = (thisReader["Id"] == DBNull.Value) ? null : thisReader["Id"].ToString();
                entity.Title = (System.String)thisReader["Title"];
                entity.LastName = (thisReader["LastName"] == DBNull.Value) ? null : thisReader["LastName"].ToString();
                entity.FirstName = (thisReader["FirstName"] == DBNull.Value) ? null : thisReader["FirstName"].ToString();
                entity.MiddleName = (thisReader["MiddleName"] == DBNull.Value) ? null : thisReader["MiddleName"].ToString();
                entity.Gender = (thisReader["Gender"] == DBNull.Value) ? null : thisReader["Gender"].ToString();
                entity.BirthDate = thisReader["BirthDate"] as System.Nullable<System.DateTime>;
                entity.Snils = (thisReader["Snils"] == DBNull.Value) ? null : thisReader["Snils"].ToString();
                entity.Inn = (thisReader["Inn"] == DBNull.Value) ? null : thisReader["Inn"].ToString();
                entity.MobilePhone = (thisReader["MobilePhone"] == DBNull.Value) ? null : thisReader["MobilePhone"].ToString();
                entity.WorkPhone = (thisReader["WorkPhone"] == DBNull.Value) ? null : thisReader["WorkPhone"].ToString();
                entity.HomePhone = (thisReader["HomePhone"] == DBNull.Value) ? null : thisReader["HomePhone"].ToString();
                entity.EMail = (thisReader["EMail"] == DBNull.Value) ? null : thisReader["EMail"].ToString();
                entity.Nation = (thisReader["Nation"] == DBNull.Value) ? null : thisReader["Nation"].ToString();
                entity.Citizenship = (thisReader["Citizenship"] == DBNull.Value) ? null : thisReader["Citizenship"].ToString();
                entity.CitizenshipType = (thisReader["CitizenshipType"] == DBNull.Value) ? null : thisReader["CitizenshipType"].ToString();
                entity.JobTitle = (thisReader["JobTitle"] == DBNull.Value) ? null : thisReader["JobTitle"].ToString();
                entity.OMSNum = (thisReader["OMSNum"] == DBNull.Value) ? null : thisReader["OMSNum"].ToString();
                entity.OMSDate = thisReader["OMSDate"] as System.Nullable<System.DateTime>;
                entity.OMSCompany = (thisReader["OMSCompany"] == DBNull.Value) ? null : thisReader["OMSCompany"].ToString();
                entity.OMSValidityPeriod = (thisReader["OMSValidityPeriod"] == DBNull.Value) ? null : thisReader["OMSValidityPeriod"].ToString();
                entity.IsiId = (thisReader["IsiId"] == DBNull.Value) ? null : thisReader["IsiId"].ToString();
                entity.Id_Auto = (System.Int32)thisReader["Id_Auto"];
                entity.MessageId = (System.String)thisReader["MessageId"];
                entity.RegAddress = thisReader["RegAddress"] as System.Nullable<System.Int32>;
                entity.FactAddress = thisReader["FactAddress"] as System.Nullable<System.Int32>;
                entity.BirthAddress = thisReader["BirthAddress"] as System.Nullable<System.Int32>;
                entity.SingleStrRegAddress = (thisReader["SingleStrRegAddress"] == DBNull.Value) ? null : thisReader["SingleStrRegAddress"].ToString();
                entity.SingleStrFactAddress = (thisReader["SingleStrFactAddress"] == DBNull.Value) ? null : thisReader["SingleStrFactAddress"].ToString();
                entity.SingleStrBirthAddress = (thisReader["SingleStrBirthAddress"] == DBNull.Value) ? null : thisReader["SingleStrBirthAddress"].ToString();

                allEntities.Add(entity);
            }
            thisReader.Close();
            return allEntities;
        }
        public IList<RequestContact> IdOfAddressToBirthAddressOfRequestContact(System.Nullable<System.Int32> BirthAddress)
        {
            SqlConnection thisConn = null;
            List<RequestContact> allEntities = new List<RequestContact>();

            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.Connection = thisConn;
            selectCommand.CommandText = "SELECT [Id] , [Title] , [LastName] , [FirstName] , [MiddleName] , [Gender] , [BirthDate] , [Snils] , [Inn] , [MobilePhone] , [WorkPhone] , [HomePhone] , [EMail] , [Nation] , [Citizenship] , [CitizenshipType] , [JobTitle] , [OMSNum] , [OMSDate] , [OMSCompany] , [OMSValidityPeriod] , [IsiId] , [Id_Auto] , [MessageId] , [RegAddress] , [FactAddress] , [BirthAddress], [SingleStrRegAddress], [SingleStrFactAddress], [SingleStrBirthAddress] FROM [dbo].[RequestContact] WHERE [BirthAddress] = @BirthAddress";

            selectCommand.Parameters.AddWithValue("@BirthAddress", BirthAddress);

            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            while (thisReader.Read())
            {
                RequestContact entity = new RequestContact();

                entity.Id = (thisReader["Id"] == DBNull.Value) ? null : thisReader["Id"].ToString();
                entity.Title = (System.String)thisReader["Title"];
                entity.LastName = (thisReader["LastName"] == DBNull.Value) ? null : thisReader["LastName"].ToString();
                entity.FirstName = (thisReader["FirstName"] == DBNull.Value) ? null : thisReader["FirstName"].ToString();
                entity.MiddleName = (thisReader["MiddleName"] == DBNull.Value) ? null : thisReader["MiddleName"].ToString();
                entity.Gender = (thisReader["Gender"] == DBNull.Value) ? null : thisReader["Gender"].ToString();
                entity.BirthDate = thisReader["BirthDate"] as System.Nullable<System.DateTime>;
                entity.Snils = (thisReader["Snils"] == DBNull.Value) ? null : thisReader["Snils"].ToString();
                entity.Inn = (thisReader["Inn"] == DBNull.Value) ? null : thisReader["Inn"].ToString();
                entity.MobilePhone = (thisReader["MobilePhone"] == DBNull.Value) ? null : thisReader["MobilePhone"].ToString();
                entity.WorkPhone = (thisReader["WorkPhone"] == DBNull.Value) ? null : thisReader["WorkPhone"].ToString();
                entity.HomePhone = (thisReader["HomePhone"] == DBNull.Value) ? null : thisReader["HomePhone"].ToString();
                entity.EMail = (thisReader["EMail"] == DBNull.Value) ? null : thisReader["EMail"].ToString();
                entity.Nation = (thisReader["Nation"] == DBNull.Value) ? null : thisReader["Nation"].ToString();
                entity.Citizenship = (thisReader["Citizenship"] == DBNull.Value) ? null : thisReader["Citizenship"].ToString();
                entity.CitizenshipType = (thisReader["CitizenshipType"] == DBNull.Value) ? null : thisReader["CitizenshipType"].ToString();
                entity.JobTitle = (thisReader["JobTitle"] == DBNull.Value) ? null : thisReader["JobTitle"].ToString();
                entity.OMSNum = (thisReader["OMSNum"] == DBNull.Value) ? null : thisReader["OMSNum"].ToString();
                entity.OMSDate = thisReader["OMSDate"] as System.Nullable<System.DateTime>;
                entity.OMSCompany = (thisReader["OMSCompany"] == DBNull.Value) ? null : thisReader["OMSCompany"].ToString();
                entity.OMSValidityPeriod = (thisReader["OMSValidityPeriod"] == DBNull.Value) ? null : thisReader["OMSValidityPeriod"].ToString();
                entity.IsiId = (thisReader["IsiId"] == DBNull.Value) ? null : thisReader["IsiId"].ToString();
                entity.Id_Auto = (System.Int32)thisReader["Id_Auto"];
                entity.MessageId = (System.String)thisReader["MessageId"];
                entity.RegAddress = thisReader["RegAddress"] as System.Nullable<System.Int32>;
                entity.FactAddress = thisReader["FactAddress"] as System.Nullable<System.Int32>;
                entity.BirthAddress = thisReader["BirthAddress"] as System.Nullable<System.Int32>;
                entity.SingleStrRegAddress = (thisReader["SingleStrRegAddress"] == DBNull.Value) ? null : thisReader["SingleStrRegAddress"].ToString();
                entity.SingleStrFactAddress = (thisReader["SingleStrFactAddress"] == DBNull.Value) ? null : thisReader["SingleStrFactAddress"].ToString();
                entity.SingleStrBirthAddress = (thisReader["SingleStrBirthAddress"] == DBNull.Value) ? null : thisReader["SingleStrBirthAddress"].ToString();

                allEntities.Add(entity);
            }
            thisReader.Close();
            return allEntities;
        }
    }
    /// <summary>
    /// All the methods for retrieving, updating and deleting data are implemented in this class file.
    /// The samples below show the finder and specific finder method for Entity1.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("SPSF", "4.1")]
    public partial class FileEntityService : CoordinateV5Service
    {
        public File ReadFileItem(System.Int32 Id_Auto)
        {
            SqlConnection thisConn = null;
            File entity = null;

            entity = new File();
            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.CommandText = "SELECT [Id] , [Title] , [FileName] , [MimeType] , [IsFileInStore] , [FileIdInStore] , [StoreName] , [Id_Auto] , [MessageId] , [ServiceDocument] FROM [dbo].[File] WHERE [Id_Auto] = @Id_Auto";
            selectCommand.Parameters.AddWithValue("@Id_Auto", Id_Auto);

            selectCommand.Connection = thisConn;
            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            if (thisReader.Read())
            {
                entity.Id = (thisReader["Id"] == DBNull.Value) ? null : thisReader["Id"].ToString();
                entity.Title = (thisReader["Title"] == DBNull.Value) ? null : thisReader["Title"].ToString();
                entity.FileName = (thisReader["FileName"] == DBNull.Value) ? null : thisReader["FileName"].ToString();
                entity.MimeType = (thisReader["MimeType"] == DBNull.Value) ? null : thisReader["MimeType"].ToString();
                entity.IsFileInStore = thisReader["IsFileInStore"] as System.Nullable<System.Boolean>;
                entity.FileIdInStore = (thisReader["FileIdInStore"] == DBNull.Value) ? null : thisReader["FileIdInStore"].ToString();
                entity.StoreName = (thisReader["StoreName"] == DBNull.Value) ? null : thisReader["StoreName"].ToString();
                entity.Id_Auto = (System.Int32)thisReader["Id_Auto"];
                entity.MessageId = (System.String)thisReader["MessageId"];
                entity.ServiceDocument = (System.Int32)thisReader["ServiceDocument"];
            }
            else
            {
                throw new Exception("Data not found");
            }
            thisReader.Close();
            return (entity);
        }

        public IList<File> ReadFileList()
        {
            SqlConnection thisConn = null;
            List<File> allEntities = new List<File>();

            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.Connection = thisConn;
            selectCommand.CommandText = "SELECT [Id] , [Title] , [FileName] , [MimeType] , [IsFileInStore] , [FileIdInStore] , [StoreName] , [Id_Auto] , [MessageId] , [ServiceDocument] FROM [dbo].[File]";
            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            while (thisReader.Read())
            {
                File entity = new File();

                entity.Id = (thisReader["Id"] == DBNull.Value) ? null : thisReader["Id"].ToString();
                entity.Title = (thisReader["Title"] == DBNull.Value) ? null : thisReader["Title"].ToString();
                entity.FileName = (thisReader["FileName"] == DBNull.Value) ? null : thisReader["FileName"].ToString();
                entity.MimeType = (thisReader["MimeType"] == DBNull.Value) ? null : thisReader["MimeType"].ToString();
                entity.IsFileInStore = thisReader["IsFileInStore"] as System.Nullable<System.Boolean>;
                entity.FileIdInStore = (thisReader["FileIdInStore"] == DBNull.Value) ? null : thisReader["FileIdInStore"].ToString();
                entity.StoreName = (thisReader["StoreName"] == DBNull.Value) ? null : thisReader["StoreName"].ToString();
                entity.Id_Auto = (System.Int32)thisReader["Id_Auto"];
                entity.MessageId = (System.String)thisReader["MessageId"];
                entity.ServiceDocument = (System.Int32)thisReader["ServiceDocument"];

                allEntities.Add(entity);
            }
            thisReader.Close();
            return allEntities;
        }

        public File CreateFile(File newentity)
        {
            File createdEntity = null;
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                SqlCommand createCommand = new SqlCommand();
                createCommand.Connection = thisConn;
                createCommand.CommandText = "INSERT INTO [dbo].[File] ([Id] , [Title] , [FileName] , [MimeType] , [IsFileInStore] , [FileIdInStore] , [StoreName] , [MessageId] , [ServiceDocument]) VALUES (@Id , @Title , @FileName , @MimeType , @IsFileInStore , @FileIdInStore , @StoreName , @MessageId , @ServiceDocument) SELECT [Id] , [Title] , [FileName] , [MimeType] , [IsFileInStore] , [FileIdInStore] , [StoreName] , [Id_Auto] , [MessageId] , [ServiceDocument] FROM [dbo].[File] WHERE [Id_Auto] = SCOPE_IDENTITY()";
                createCommand.Parameters.AddWithValue("@Id", (newentity.Id == null) ? (object)DBNull.Value : newentity.Id);
                createCommand.Parameters.AddWithValue("@Title", (newentity.Title == null) ? (object)DBNull.Value : newentity.Title);
                createCommand.Parameters.AddWithValue("@FileName", (newentity.FileName == null) ? (object)DBNull.Value : newentity.FileName);
                createCommand.Parameters.AddWithValue("@MimeType", (newentity.MimeType == null) ? (object)DBNull.Value : newentity.MimeType);
                createCommand.Parameters.AddWithValue("@IsFileInStore", (newentity.IsFileInStore == null) ? (object)DBNull.Value : newentity.IsFileInStore);
                createCommand.Parameters.AddWithValue("@FileIdInStore", (newentity.FileIdInStore == null) ? (object)DBNull.Value : newentity.FileIdInStore);
                createCommand.Parameters.AddWithValue("@StoreName", (newentity.StoreName == null) ? (object)DBNull.Value : newentity.StoreName);
                createCommand.Parameters.AddWithValue("@Id_Auto", newentity.Id_Auto);
                createCommand.Parameters.AddWithValue("@MessageId", newentity.MessageId);
                createCommand.Parameters.AddWithValue("@ServiceDocument", newentity.ServiceDocument);


                SqlDataReader thisReader = createCommand.ExecuteReader(CommandBehavior.CloseConnection);
                if (thisReader.Read())
                {
                    createdEntity = new File();

                    createdEntity.Id = (thisReader["Id"] == DBNull.Value) ? null : thisReader["Id"].ToString();
                    createdEntity.Title = (thisReader["Title"] == DBNull.Value) ? null : thisReader["Title"].ToString();
                    createdEntity.FileName = (thisReader["FileName"] == DBNull.Value) ? null : thisReader["FileName"].ToString();
                    createdEntity.MimeType = (thisReader["MimeType"] == DBNull.Value) ? null : thisReader["MimeType"].ToString();
                    createdEntity.IsFileInStore = thisReader["IsFileInStore"] as System.Nullable<System.Boolean>;
                    createdEntity.FileIdInStore = (thisReader["FileIdInStore"] == DBNull.Value) ? null : thisReader["FileIdInStore"].ToString();
                    createdEntity.StoreName = (thisReader["StoreName"] == DBNull.Value) ? null : thisReader["StoreName"].ToString();
                    createdEntity.Id_Auto = (System.Int32)thisReader["Id_Auto"];
                    createdEntity.MessageId = (System.String)thisReader["MessageId"];
                    createdEntity.ServiceDocument = (System.Int32)thisReader["ServiceDocument"];
                }
                else
                {
                    throw new Exception("Data not found");
                }
                return createdEntity;
            }
            finally
            {
                thisConn.Dispose();
            }
        }

        public void DeleteFile(System.Int32 Id_Auto)
        {
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                SqlCommand deleteCommand = new SqlCommand();
                deleteCommand.Connection = thisConn;
                deleteCommand.CommandText = "DELETE FROM [dbo].[File] WHERE [Id_Auto] = @Id_Auto";
                deleteCommand.Parameters.AddWithValue("@Id_Auto", Id_Auto);
                deleteCommand.ExecuteNonQuery();
            }
            finally
            {
                thisConn.Dispose();
            }

        }


        public void UpdateFile(File updateFile)
        {
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                SqlCommand updateCommand = new SqlCommand();
                updateCommand.Connection = thisConn;
                updateCommand.CommandText = "UPDATE [dbo].[File] SET [Id] = @Id , [Title] = @Title , [FileName] = @FileName , [MimeType] = @MimeType , [IsFileInStore] = @IsFileInStore , [FileIdInStore] = @FileIdInStore , [StoreName] = @StoreName , [MessageId] = @MessageId , [ServiceDocument] = @ServiceDocument WHERE [Id_Auto] = @Id_Auto";

                //add new field values
                updateCommand.Parameters.AddWithValue("@Id", (updateFile.Id == null) ? (object)DBNull.Value : updateFile.Id);
                updateCommand.Parameters.AddWithValue("@Title", (updateFile.Title == null) ? (object)DBNull.Value : updateFile.Title);
                updateCommand.Parameters.AddWithValue("@FileName", (updateFile.FileName == null) ? (object)DBNull.Value : updateFile.FileName);
                updateCommand.Parameters.AddWithValue("@MimeType", (updateFile.MimeType == null) ? (object)DBNull.Value : updateFile.MimeType);
                updateCommand.Parameters.AddWithValue("@IsFileInStore", (updateFile.IsFileInStore == null) ? (object)DBNull.Value : updateFile.IsFileInStore);
                updateCommand.Parameters.AddWithValue("@FileIdInStore", (updateFile.FileIdInStore == null) ? (object)DBNull.Value : updateFile.FileIdInStore);
                updateCommand.Parameters.AddWithValue("@StoreName", (updateFile.StoreName == null) ? (object)DBNull.Value : updateFile.StoreName);
                updateCommand.Parameters.AddWithValue("@MessageId", updateFile.MessageId);
                updateCommand.Parameters.AddWithValue("@ServiceDocument", updateFile.ServiceDocument);

                updateCommand.Parameters.AddWithValue("@Id_Auto", updateFile.Id_Auto);

                updateCommand.ExecuteNonQuery();
            }
            finally
            {
                thisConn.Dispose();
            }
        }
    }
    /// <summary>
    /// All the methods for retrieving, updating and deleting data are implemented in this class file.
    /// The samples below show the finder and specific finder method for Entity1.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("SPSF", "4.1")]
    public partial class RequestEntityService : CoordinateV5Service
    {
        public Request ReadRequestItem(System.Int32 Id)
        {
            SqlConnection thisConn = null;
            Request entity = null;

            entity = new Request();
            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.CommandText = "SELECT [Id] , [Title] , [MessageId] , [DeclarantRequestAccount] , [DeclarantRequestContact] , [TrusteeRequestContact] , [ServiceProperties] , [Service] , [ServiceHeader] FROM [dbo].[Request] WHERE [Id] = @Id";
            selectCommand.Parameters.AddWithValue("@Id", Id);

            selectCommand.Connection = thisConn;
            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            if (thisReader.Read())
            {
                entity.Id = (System.Int32)thisReader["Id"];
                entity.Title = (System.String)thisReader["Title"];
                entity.MessageId = (System.String)thisReader["MessageId"];
                entity.DeclarantRequestAccount = thisReader["DeclarantRequestAccount"] as System.Nullable<System.Int32>;
                entity.DeclarantRequestContact = thisReader["DeclarantRequestContact"] as System.Nullable<System.Int32>;
                entity.TrusteeRequestContact = thisReader["TrusteeRequestContact"] as System.Nullable<System.Int32>;
                entity.ServiceProperties = (System.Int32)thisReader["ServiceProperties"];
                entity.Service = (System.Int32)thisReader["Service"];
                entity.ServiceHeader = (System.Int32)thisReader["ServiceHeader"];
            }
            else
            {
                throw new Exception("Data not found");
            }
            thisReader.Close();
            return (entity);
        }

        public IList<Request> ReadRequestList()
        {
            SqlConnection thisConn = null;
            List<Request> allEntities = new List<Request>();

            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.Connection = thisConn;
            selectCommand.CommandText = "SELECT [Id] , [Title] , [MessageId] , [DeclarantRequestAccount] , [DeclarantRequestContact] , [TrusteeRequestContact] , [ServiceProperties] , [Service] , [ServiceHeader] FROM [dbo].[Request]";
            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            while (thisReader.Read())
            {
                Request entity = new Request();

                entity.Id = (System.Int32)thisReader["Id"];
                entity.Title = (System.String)thisReader["Title"];
                entity.MessageId = (System.String)thisReader["MessageId"];
                entity.DeclarantRequestAccount = thisReader["DeclarantRequestAccount"] as System.Nullable<System.Int32>;
                entity.DeclarantRequestContact = thisReader["DeclarantRequestContact"] as System.Nullable<System.Int32>;
                entity.TrusteeRequestContact = thisReader["TrusteeRequestContact"] as System.Nullable<System.Int32>;
                entity.ServiceProperties = (System.Int32)thisReader["ServiceProperties"];
                entity.Service = (System.Int32)thisReader["Service"];
                entity.ServiceHeader = (System.Int32)thisReader["ServiceHeader"];

                allEntities.Add(entity);
            }
            thisReader.Close();
            return allEntities;
        }

        public Request CreateRequest(Request newentity)
        {
            Request createdEntity = null;
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                SqlCommand createCommand = new SqlCommand();
                createCommand.Connection = thisConn;
                createCommand.CommandText = "INSERT INTO [dbo].[Request] ([Title] , [MessageId] , [DeclarantRequestAccount] , [DeclarantRequestContact] , [TrusteeRequestContact] , [ServiceProperties] , [Service] , [ServiceHeader]) VALUES (@Title , @MessageId , @DeclarantRequestAccount , @DeclarantRequestContact , @TrusteeRequestContact , @ServiceProperties , @Service , @ServiceHeader) SELECT [Id] , [Title] , [MessageId] , [DeclarantRequestAccount] , [DeclarantRequestContact] , [TrusteeRequestContact] , [ServiceProperties] , [Service] , [ServiceHeader] FROM [dbo].[Request] WHERE [Id] = SCOPE_IDENTITY()";
                createCommand.Parameters.AddWithValue("@Id", newentity.Id);
                createCommand.Parameters.AddWithValue("@Title", newentity.Title);
                createCommand.Parameters.AddWithValue("@MessageId", newentity.MessageId);
                createCommand.Parameters.AddWithValue("@DeclarantRequestAccount", (newentity.DeclarantRequestAccount == null) ? (object)DBNull.Value : newentity.DeclarantRequestAccount);
                createCommand.Parameters.AddWithValue("@DeclarantRequestContact", (newentity.DeclarantRequestContact == null) ? (object)DBNull.Value : newentity.DeclarantRequestContact);
                createCommand.Parameters.AddWithValue("@TrusteeRequestContact", (newentity.TrusteeRequestContact == null) ? (object)DBNull.Value : newentity.TrusteeRequestContact);
                createCommand.Parameters.AddWithValue("@ServiceProperties", newentity.ServiceProperties);
                createCommand.Parameters.AddWithValue("@Service", newentity.Service);
                createCommand.Parameters.AddWithValue("@ServiceHeader", newentity.ServiceHeader);


                SqlDataReader thisReader = createCommand.ExecuteReader(CommandBehavior.CloseConnection);
                if (thisReader.Read())
                {
                    createdEntity = new Request();

                    createdEntity.Id = (System.Int32)thisReader["Id"];
                    createdEntity.Title = (System.String)thisReader["Title"];
                    createdEntity.MessageId = (System.String)thisReader["MessageId"];
                    createdEntity.DeclarantRequestAccount = thisReader["DeclarantRequestAccount"] as System.Nullable<System.Int32>;
                    createdEntity.DeclarantRequestContact = thisReader["DeclarantRequestContact"] as System.Nullable<System.Int32>;
                    createdEntity.TrusteeRequestContact = thisReader["TrusteeRequestContact"] as System.Nullable<System.Int32>;
                    createdEntity.ServiceProperties = (System.Int32)thisReader["ServiceProperties"];
                    createdEntity.Service = (System.Int32)thisReader["Service"];
                    createdEntity.ServiceHeader = (System.Int32)thisReader["ServiceHeader"];
                }
                else
                {
                    throw new Exception("Data not found");
                }
                return createdEntity;
            }
            finally
            {
                thisConn.Dispose();
            }
        }

        public void DeleteRequest(System.Int32 Id)
        {
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                SqlCommand deleteCommand = new SqlCommand();
                deleteCommand.Connection = thisConn;
                deleteCommand.CommandText = "DELETE FROM [dbo].[Request] WHERE [Id] = @Id";
                deleteCommand.Parameters.AddWithValue("@Id", Id);
                deleteCommand.ExecuteNonQuery();
            }
            finally
            {
                thisConn.Dispose();
            }

        }


        public void UpdateRequest(Request updateRequest)
        {
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                SqlCommand updateCommand = new SqlCommand();
                updateCommand.Connection = thisConn;
                updateCommand.CommandText = "UPDATE [dbo].[Request] SET [Title] = @Title , [MessageId] = @MessageId , [DeclarantRequestAccount] = @DeclarantRequestAccount , [DeclarantRequestContact] = @DeclarantRequestContact , [TrusteeRequestContact] = @TrusteeRequestContact , [ServiceProperties] = @ServiceProperties , [Service] = @Service , [ServiceHeader] = @ServiceHeader WHERE [Id] = @Id";

                //add new field values
                updateCommand.Parameters.AddWithValue("@Title", updateRequest.Title);
                updateCommand.Parameters.AddWithValue("@MessageId", updateRequest.MessageId);
                updateCommand.Parameters.AddWithValue("@DeclarantRequestAccount", (updateRequest.DeclarantRequestAccount == null) ? (object)DBNull.Value : updateRequest.DeclarantRequestAccount);
                updateCommand.Parameters.AddWithValue("@DeclarantRequestContact", (updateRequest.DeclarantRequestContact == null) ? (object)DBNull.Value : updateRequest.DeclarantRequestContact);
                updateCommand.Parameters.AddWithValue("@TrusteeRequestContact", (updateRequest.TrusteeRequestContact == null) ? (object)DBNull.Value : updateRequest.TrusteeRequestContact);
                updateCommand.Parameters.AddWithValue("@ServiceProperties", updateRequest.ServiceProperties);
                updateCommand.Parameters.AddWithValue("@Service", updateRequest.Service);
                updateCommand.Parameters.AddWithValue("@ServiceHeader", updateRequest.ServiceHeader);

                updateCommand.Parameters.AddWithValue("@Id", updateRequest.Id);

                updateCommand.ExecuteNonQuery();
            }
            finally
            {
                thisConn.Dispose();
            }
        }
    }
    /// <summary>
    /// All the methods for retrieving, updating and deleting data are implemented in this class file.
    /// The samples below show the finder and specific finder method for Entity1.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("SPSF", "4.1")]
    public partial class RequestAccountEntityService : CoordinateV5Service
    {
        public RequestAccount ReadRequestAccountItem(System.Int32 Id)
        {
            SqlConnection thisConn = null;
            RequestAccount entity = null;

            entity = new RequestAccount();
            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.CommandText = "SELECT [Title] , [FullName] , [Name] , [BrandName] , [Brand] , [Ogrn] , [OgrnAuthority] , [OgrnAuthorityAddress] , [OgrnNum] , [OgrnDate] , [Inn] , [InnAuthority] , [InnNum] , [InnDate] , [Kpp] , [Okpo] , [OrgFormCode] , [Okved] , [Okfs] , [BankName] , [BankBik] , [CorrAccount] , [SetAccount] , [Phone] , [Fax] , [EMail] , [WebSite] , [Id] , [MessageId] , [PostalAddress] , [FactAddress] , [RequestContact], [SingleStrPostalAddress], [SingleStrFactAddress] FROM [dbo].[RequestAccount] WHERE [Id] = @Id";
            selectCommand.Parameters.AddWithValue("@Id", Id);

            selectCommand.Connection = thisConn;
            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            if (thisReader.Read())
            {
                entity.Title = (thisReader["Title"] == DBNull.Value) ? null : thisReader["Title"].ToString();
                entity.FullName = (thisReader["FullName"] == DBNull.Value) ? null : thisReader["FullName"].ToString();
                entity.Name = (thisReader["Name"] == DBNull.Value) ? null : thisReader["Name"].ToString();
                entity.BrandName = (thisReader["BrandName"] == DBNull.Value) ? null : thisReader["BrandName"].ToString();
                entity.Brand = (thisReader["Brand"] == DBNull.Value) ? null : thisReader["Brand"].ToString();
                entity.Ogrn = (thisReader["Ogrn"] == DBNull.Value) ? null : thisReader["Ogrn"].ToString();
                entity.OgrnAuthority = (thisReader["OgrnAuthority"] == DBNull.Value) ? null : thisReader["OgrnAuthority"].ToString();
                entity.OgrnAuthorityAddress = (thisReader["OgrnAuthorityAddress"] == DBNull.Value) ? null : thisReader["OgrnAuthorityAddress"].ToString();
                entity.OgrnNum = (thisReader["OgrnNum"] == DBNull.Value) ? null : thisReader["OgrnNum"].ToString();
                entity.OgrnDate = thisReader["OgrnDate"] as System.Nullable<System.DateTime>;
                entity.Inn = (thisReader["Inn"] == DBNull.Value) ? null : thisReader["Inn"].ToString();
                entity.InnAuthority = (thisReader["InnAuthority"] == DBNull.Value) ? null : thisReader["InnAuthority"].ToString();
                entity.InnNum = (thisReader["InnNum"] == DBNull.Value) ? null : thisReader["InnNum"].ToString();
                entity.InnDate = thisReader["InnDate"] as System.Nullable<System.DateTime>;
                entity.Kpp = (thisReader["Kpp"] == DBNull.Value) ? null : thisReader["Kpp"].ToString();
                entity.Okpo = (thisReader["Okpo"] == DBNull.Value) ? null : thisReader["Okpo"].ToString();
                entity.OrgFormCode = (thisReader["OrgFormCode"] == DBNull.Value) ? null : thisReader["OrgFormCode"].ToString();
                entity.Okved = (thisReader["Okved"] == DBNull.Value) ? null : thisReader["Okved"].ToString();
                entity.Okfs = (thisReader["Okfs"] == DBNull.Value) ? null : thisReader["Okfs"].ToString();
                entity.BankName = (thisReader["BankName"] == DBNull.Value) ? null : thisReader["BankName"].ToString();
                entity.BankBik = (thisReader["BankBik"] == DBNull.Value) ? null : thisReader["BankBik"].ToString();
                entity.CorrAccount = (thisReader["CorrAccount"] == DBNull.Value) ? null : thisReader["CorrAccount"].ToString();
                entity.SetAccount = (thisReader["SetAccount"] == DBNull.Value) ? null : thisReader["SetAccount"].ToString();
                entity.Phone = (thisReader["Phone"] == DBNull.Value) ? null : thisReader["Phone"].ToString();
                entity.Fax = (thisReader["Fax"] == DBNull.Value) ? null : thisReader["Fax"].ToString();
                entity.EMail = (thisReader["EMail"] == DBNull.Value) ? null : thisReader["EMail"].ToString();
                entity.WebSite = (thisReader["WebSite"] == DBNull.Value) ? null : thisReader["WebSite"].ToString();
                entity.Id = (System.Int32)thisReader["Id"];
                entity.MessageId = (System.String)thisReader["MessageId"];
                entity.PostalAddress = thisReader["PostalAddress"] as System.Nullable<System.Int32>;
                entity.FactAddress = thisReader["FactAddress"] as System.Nullable<System.Int32>;
                entity.RequestContact = thisReader["RequestContact"] as System.Nullable<System.Int32>;
                entity.SingleStrPostalAddress = (thisReader["SingleStrPostalAddress"] == DBNull.Value) ? null : thisReader["SingleStrPostalAddress"].ToString();
                entity.SingleStrFactAddress = (thisReader["SingleStrFactAddress"] == DBNull.Value) ? null : thisReader["SingleStrFactAddress"].ToString();
            }
            else
            {
                throw new Exception("Data not found");
            }
            thisReader.Close();
            return (entity);
        }

        public IList<RequestAccount> ReadRequestAccountList()
        {
            SqlConnection thisConn = null;
            List<RequestAccount> allEntities = new List<RequestAccount>();

            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.Connection = thisConn;
            selectCommand.CommandText = "SELECT [Title] , [FullName] , [Name] , [BrandName] , [Brand] , [Ogrn] , [OgrnAuthority] , [OgrnAuthorityAddress] , [OgrnNum] , [OgrnDate] , [Inn] , [InnAuthority] , [InnNum] , [InnDate] , [Kpp] , [Okpo] , [OrgFormCode] , [Okved] , [Okfs] , [BankName] , [BankBik] , [CorrAccount] , [SetAccount] , [Phone] , [Fax] , [EMail] , [WebSite] , [Id] , [MessageId] , [PostalAddress] , [FactAddress] , [RequestContact], [SingleStrPostalAddress], [SingleStrFactAddress] FROM [dbo].[RequestAccount]";
            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            while (thisReader.Read())
            {
                RequestAccount entity = new RequestAccount();

                entity.Title = (thisReader["Title"] == DBNull.Value) ? null : thisReader["Title"].ToString();
                entity.FullName = (thisReader["FullName"] == DBNull.Value) ? null : thisReader["FullName"].ToString();
                entity.Name = (thisReader["Name"] == DBNull.Value) ? null : thisReader["Name"].ToString();
                entity.BrandName = (thisReader["BrandName"] == DBNull.Value) ? null : thisReader["BrandName"].ToString();
                entity.Brand = (thisReader["Brand"] == DBNull.Value) ? null : thisReader["Brand"].ToString();
                entity.Ogrn = (thisReader["Ogrn"] == DBNull.Value) ? null : thisReader["Ogrn"].ToString();
                entity.OgrnAuthority = (thisReader["OgrnAuthority"] == DBNull.Value) ? null : thisReader["OgrnAuthority"].ToString();
                entity.OgrnAuthorityAddress = (thisReader["OgrnAuthorityAddress"] == DBNull.Value) ? null : thisReader["OgrnAuthorityAddress"].ToString();
                entity.OgrnNum = (thisReader["OgrnNum"] == DBNull.Value) ? null : thisReader["OgrnNum"].ToString();
                entity.OgrnDate = thisReader["OgrnDate"] as System.Nullable<System.DateTime>;
                entity.Inn = (thisReader["Inn"] == DBNull.Value) ? null : thisReader["Inn"].ToString();
                entity.InnAuthority = (thisReader["InnAuthority"] == DBNull.Value) ? null : thisReader["InnAuthority"].ToString();
                entity.InnNum = (thisReader["InnNum"] == DBNull.Value) ? null : thisReader["InnNum"].ToString();
                entity.InnDate = thisReader["InnDate"] as System.Nullable<System.DateTime>;
                entity.Kpp = (thisReader["Kpp"] == DBNull.Value) ? null : thisReader["Kpp"].ToString();
                entity.Okpo = (thisReader["Okpo"] == DBNull.Value) ? null : thisReader["Okpo"].ToString();
                entity.OrgFormCode = (thisReader["OrgFormCode"] == DBNull.Value) ? null : thisReader["OrgFormCode"].ToString();
                entity.Okved = (thisReader["Okved"] == DBNull.Value) ? null : thisReader["Okved"].ToString();
                entity.Okfs = (thisReader["Okfs"] == DBNull.Value) ? null : thisReader["Okfs"].ToString();
                entity.BankName = (thisReader["BankName"] == DBNull.Value) ? null : thisReader["BankName"].ToString();
                entity.BankBik = (thisReader["BankBik"] == DBNull.Value) ? null : thisReader["BankBik"].ToString();
                entity.CorrAccount = (thisReader["CorrAccount"] == DBNull.Value) ? null : thisReader["CorrAccount"].ToString();
                entity.SetAccount = (thisReader["SetAccount"] == DBNull.Value) ? null : thisReader["SetAccount"].ToString();
                entity.Phone = (thisReader["Phone"] == DBNull.Value) ? null : thisReader["Phone"].ToString();
                entity.Fax = (thisReader["Fax"] == DBNull.Value) ? null : thisReader["Fax"].ToString();
                entity.EMail = (thisReader["EMail"] == DBNull.Value) ? null : thisReader["EMail"].ToString();
                entity.WebSite = (thisReader["WebSite"] == DBNull.Value) ? null : thisReader["WebSite"].ToString();
                entity.Id = (System.Int32)thisReader["Id"];
                entity.MessageId = (System.String)thisReader["MessageId"];
                entity.PostalAddress = thisReader["PostalAddress"] as System.Nullable<System.Int32>;
                entity.FactAddress = thisReader["FactAddress"] as System.Nullable<System.Int32>;
                entity.RequestContact = thisReader["RequestContact"] as System.Nullable<System.Int32>;
                entity.SingleStrPostalAddress = (thisReader["SingleStrPostalAddress"] == DBNull.Value) ? null : thisReader["SingleStrPostalAddress"].ToString();
                entity.SingleStrFactAddress = (thisReader["SingleStrFactAddress"] == DBNull.Value) ? null : thisReader["SingleStrFactAddress"].ToString();

                allEntities.Add(entity);
            }
            thisReader.Close();
            return allEntities;
        }

        public RequestAccount CreateRequestAccount(RequestAccount newentity)
        {
            RequestAccount createdEntity = null;
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                SqlCommand createCommand = new SqlCommand();
                createCommand.Connection = thisConn;
                createCommand.CommandText = "INSERT INTO [dbo].[RequestAccount] ([FullName] , [Name] , [BrandName] , [Ogrn] , [OgrnAuthority] , [OgrnNum] , [OgrnDate] , [Inn] , [InnAuthority] , [InnNum] , [InnDate] , [Kpp] , [Okpo] , [OrgFormCode] , [Okved] , [Okfs] , [BankName] , [BankBik] , [CorrAccount] , [SetAccount] , [Phone] , [Fax] , [EMail] , [WebSite] , [MessageId] , [PostalAddress] , [FactAddress] , [RequestContact], [Brand], [OgrnAuthorityAddress], [Author]) VALUES (@FullName , @Name , @BrandName , @Ogrn , @OgrnAuthority , @OgrnNum , @OgrnDate , @Inn , @InnAuthority , @InnNum , @InnDate , @Kpp , @Okpo , @OrgFormCode , @Okved , @Okfs , @BankName , @BankBik , @CorrAccount , @SetAccount , @Phone , @Fax , @EMail , @WebSite , @MessageId , @PostalAddress , @FactAddress , @RequestContact, @Brand, @OgrnAuthorityAddress, @Author) SELECT [Title] , [FullName] , [Name] , [BrandName] , [Ogrn] , [OgrnAuthority] , [OgrnNum] , [OgrnDate] , [Inn] , [InnAuthority] , [InnNum] , [InnDate] , [Kpp] , [Okpo] , [OrgFormCode] , [Okved] , [Okfs] , [BankName] , [BankBik] , [CorrAccount] , [SetAccount] , [Phone] , [Fax] , [EMail] , [WebSite] , [Id] , [MessageId] , [PostalAddress] , [FactAddress] , [RequestContact], [Brand], [OgrnAuthorityAddress], [SingleStrPostalAddress], [SingleStrFactAddress] FROM [dbo].[RequestAccount] WHERE [Id] = SCOPE_IDENTITY()";
                createCommand.Parameters.AddWithValue("@FullName", (newentity.FullName == null) ? (object)DBNull.Value : newentity.FullName);
                createCommand.Parameters.AddWithValue("@Name", (newentity.Name == null) ? (object)DBNull.Value : newentity.Name);
                createCommand.Parameters.AddWithValue("@BrandName", (newentity.BrandName == null) ? (object)DBNull.Value : newentity.BrandName);
                createCommand.Parameters.AddWithValue("@Brande", (newentity.Brand == null) ? (object)DBNull.Value : newentity.Brand);
                createCommand.Parameters.AddWithValue("@Ogrn", (newentity.Ogrn == null) ? (object)DBNull.Value : newentity.Ogrn);
                createCommand.Parameters.AddWithValue("@OgrnAuthority", (newentity.OgrnAuthority == null) ? (object)DBNull.Value : newentity.OgrnAuthority);
                createCommand.Parameters.AddWithValue("@OgrnAuthorityAddress", (newentity.OgrnAuthorityAddress == null) ? (object)DBNull.Value : newentity.OgrnAuthorityAddress);
                createCommand.Parameters.AddWithValue("@OgrnNum", (newentity.OgrnNum == null) ? (object)DBNull.Value : newentity.OgrnNum);
                createCommand.Parameters.AddWithValue("@OgrnDate", (newentity.OgrnDate == null) ? (object)DBNull.Value : newentity.OgrnDate);
                createCommand.Parameters.AddWithValue("@Inn", (newentity.Inn == null) ? (object)DBNull.Value : newentity.Inn);
                createCommand.Parameters.AddWithValue("@InnAuthority", (newentity.InnAuthority == null) ? (object)DBNull.Value : newentity.InnAuthority);
                createCommand.Parameters.AddWithValue("@InnNum", (newentity.InnNum == null) ? (object)DBNull.Value : newentity.InnNum);
                createCommand.Parameters.AddWithValue("@InnDate", (newentity.InnDate == null) ? (object)DBNull.Value : newentity.InnDate);
                createCommand.Parameters.AddWithValue("@Kpp", (newentity.Kpp == null) ? (object)DBNull.Value : newentity.Kpp);
                createCommand.Parameters.AddWithValue("@Okpo", (newentity.Okpo == null) ? (object)DBNull.Value : newentity.Okpo);
                createCommand.Parameters.AddWithValue("@OrgFormCode", (newentity.OrgFormCode == null) ? (object)DBNull.Value : newentity.OrgFormCode);
                createCommand.Parameters.AddWithValue("@Okved", (newentity.Okved == null) ? (object)DBNull.Value : newentity.Okved);
                createCommand.Parameters.AddWithValue("@Okfs", (newentity.Okfs == null) ? (object)DBNull.Value : newentity.Okfs);
                createCommand.Parameters.AddWithValue("@BankName", (newentity.BankName == null) ? (object)DBNull.Value : newentity.BankName);
                createCommand.Parameters.AddWithValue("@BankBik", (newentity.BankBik == null) ? (object)DBNull.Value : newentity.BankBik);
                createCommand.Parameters.AddWithValue("@CorrAccount", (newentity.CorrAccount == null) ? (object)DBNull.Value : newentity.CorrAccount);
                createCommand.Parameters.AddWithValue("@SetAccount", (newentity.SetAccount == null) ? (object)DBNull.Value : newentity.SetAccount);
                createCommand.Parameters.AddWithValue("@Phone", (newentity.Phone == null) ? (object)DBNull.Value : newentity.Phone);
                createCommand.Parameters.AddWithValue("@Fax", (newentity.Fax == null) ? (object)DBNull.Value : newentity.Fax);
                createCommand.Parameters.AddWithValue("@EMail", (newentity.EMail == null) ? (object)DBNull.Value : newentity.EMail);
                createCommand.Parameters.AddWithValue("@WebSite", (newentity.WebSite == null) ? (object)DBNull.Value : newentity.WebSite);
                createCommand.Parameters.AddWithValue("@Id", newentity.Id);
                createCommand.Parameters.AddWithValue("@MessageId", newentity.MessageId);
                createCommand.Parameters.AddWithValue("@PostalAddress", (newentity.PostalAddress == null) ? (object)DBNull.Value : newentity.PostalAddress);
                createCommand.Parameters.AddWithValue("@FactAddress", (newentity.FactAddress == null) ? (object)DBNull.Value : newentity.FactAddress);
                createCommand.Parameters.AddWithValue("@RequestContact", (newentity.RequestContact == null) ? (object)DBNull.Value : newentity.RequestContact);
                createCommand.Parameters.AddWithValue("@Author", SPContext.Current != null ? SPContext.Current.Web.CurrentUser.LoginName : (object)DBNull.Value);


                SqlDataReader thisReader = createCommand.ExecuteReader(CommandBehavior.CloseConnection);
                if (thisReader.Read())
                {
                    createdEntity = new RequestAccount();

                    createdEntity.Title = (thisReader["Title"] == DBNull.Value) ? null : thisReader["Title"].ToString();
                    createdEntity.FullName = (thisReader["FullName"] == DBNull.Value) ? null : thisReader["FullName"].ToString();
                    createdEntity.Name = (thisReader["Name"] == DBNull.Value) ? null : thisReader["Name"].ToString();
                    createdEntity.BrandName = (thisReader["BrandName"] == DBNull.Value) ? null : thisReader["BrandName"].ToString();
                    createdEntity.Brand = (thisReader["Brand"] == DBNull.Value) ? null : thisReader["Brand"].ToString();
                    createdEntity.Ogrn = (thisReader["Ogrn"] == DBNull.Value) ? null : thisReader["Ogrn"].ToString();
                    createdEntity.OgrnAuthority = (thisReader["OgrnAuthority"] == DBNull.Value) ? null : thisReader["OgrnAuthority"].ToString();
                    createdEntity.OgrnAuthorityAddress = (thisReader["OgrnAuthorityAddress"] == DBNull.Value) ? null : thisReader["OgrnAuthorityAddress"].ToString();
                    createdEntity.OgrnNum = (thisReader["OgrnNum"] == DBNull.Value) ? null : thisReader["OgrnNum"].ToString();
                    createdEntity.OgrnDate = thisReader["OgrnDate"] as System.Nullable<System.DateTime>;
                    createdEntity.Inn = (thisReader["Inn"] == DBNull.Value) ? null : thisReader["Inn"].ToString();
                    createdEntity.InnAuthority = (thisReader["InnAuthority"] == DBNull.Value) ? null : thisReader["InnAuthority"].ToString();
                    createdEntity.InnNum = (thisReader["InnNum"] == DBNull.Value) ? null : thisReader["InnNum"].ToString();
                    createdEntity.InnDate = thisReader["InnDate"] as System.Nullable<System.DateTime>;
                    createdEntity.Kpp = (thisReader["Kpp"] == DBNull.Value) ? null : thisReader["Kpp"].ToString();
                    createdEntity.Okpo = (thisReader["Okpo"] == DBNull.Value) ? null : thisReader["Okpo"].ToString();
                    createdEntity.OrgFormCode = (thisReader["OrgFormCode"] == DBNull.Value) ? null : thisReader["OrgFormCode"].ToString();
                    createdEntity.Okved = (thisReader["Okved"] == DBNull.Value) ? null : thisReader["Okved"].ToString();
                    createdEntity.Okfs = (thisReader["Okfs"] == DBNull.Value) ? null : thisReader["Okfs"].ToString();
                    createdEntity.BankName = (thisReader["BankName"] == DBNull.Value) ? null : thisReader["BankName"].ToString();
                    createdEntity.BankBik = (thisReader["BankBik"] == DBNull.Value) ? null : thisReader["BankBik"].ToString();
                    createdEntity.CorrAccount = (thisReader["CorrAccount"] == DBNull.Value) ? null : thisReader["CorrAccount"].ToString();
                    createdEntity.SetAccount = (thisReader["SetAccount"] == DBNull.Value) ? null : thisReader["SetAccount"].ToString();
                    createdEntity.Phone = (thisReader["Phone"] == DBNull.Value) ? null : thisReader["Phone"].ToString();
                    createdEntity.Fax = (thisReader["Fax"] == DBNull.Value) ? null : thisReader["Fax"].ToString();
                    createdEntity.EMail = (thisReader["EMail"] == DBNull.Value) ? null : thisReader["EMail"].ToString();
                    createdEntity.WebSite = (thisReader["WebSite"] == DBNull.Value) ? null : thisReader["WebSite"].ToString();
                    createdEntity.Id = (System.Int32)thisReader["Id"];
                    createdEntity.MessageId = (System.String)thisReader["MessageId"];
                    createdEntity.PostalAddress = thisReader["PostalAddress"] as System.Nullable<System.Int32>;
                    createdEntity.FactAddress = thisReader["FactAddress"] as System.Nullable<System.Int32>;
                    createdEntity.RequestContact = thisReader["RequestContact"] as System.Nullable<System.Int32>;
                    createdEntity.SingleStrPostalAddress = (thisReader["SingleStrPostalAddress"] == DBNull.Value) ? null : thisReader["SingleStrPostalAddress"].ToString();
                    createdEntity.SingleStrFactAddress = (thisReader["SingleStrFactAddress"] == DBNull.Value) ? null : thisReader["SingleStrFactAddress"].ToString();
                }
                else
                {
                    throw new Exception("Data not found");
                }
                return createdEntity;
            }
            finally
            {
                thisConn.Dispose();
            }
        }

        public void DeleteRequestAccount(System.Int32 Id)
        {
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                SqlCommand deleteCommand = new SqlCommand();
                deleteCommand.Connection = thisConn;
                deleteCommand.CommandText = "DELETE FROM [dbo].[RequestAccount] WHERE [Id] = @Id";
                deleteCommand.Parameters.AddWithValue("@Id", Id);
                deleteCommand.ExecuteNonQuery();
            }
            finally
            {
                thisConn.Dispose();
            }

        }


        public void UpdateRequestAccount(RequestAccount updateRequestAccount)
        {
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                SqlCommand updateCommand = new SqlCommand();
                updateCommand.Connection = thisConn;
                updateCommand.CommandText = "UPDATE [dbo].[RequestAccount] SET [FullName] = @FullName , [Name] = @Name , [BrandName] = @BrandName , [Ogrn] = @Ogrn , [OgrnAuthority] = @OgrnAuthority , [OgrnNum] = @OgrnNum , [OgrnDate] = @OgrnDate , [Inn] = @Inn , [InnAuthority] = @InnAuthority , [InnNum] = @InnNum , [InnDate] = @InnDate , [Kpp] = @Kpp , [Okpo] = @Okpo , [OrgFormCode] = @OrgFormCode , [Okved] = @Okved , [Okfs] = @Okfs , [BankName] = @BankName , [BankBik] = @BankBik , [CorrAccount] = @CorrAccount , [SetAccount] = @SetAccount , [Phone] = @Phone , [Fax] = @Fax , [EMail] = @EMail , [WebSite] = @WebSite , [MessageId] = @MessageId , [PostalAddress] = @PostalAddress , [FactAddress] = @FactAddress , [RequestContact] = @RequestContact , [Brand] = @Brand , [OgrnAuthorityAddress] = @OgrnAuthorityAddress , [Author] = @Author WHERE [Id] = @Id";

                //add new field values
                updateCommand.Parameters.AddWithValue("@FullName", (updateRequestAccount.FullName == null) ? (object)DBNull.Value : updateRequestAccount.FullName);
                updateCommand.Parameters.AddWithValue("@Name", (updateRequestAccount.Name == null) ? (object)DBNull.Value : updateRequestAccount.Name);
                updateCommand.Parameters.AddWithValue("@BrandName", (updateRequestAccount.BrandName == null) ? (object)DBNull.Value : updateRequestAccount.BrandName);
                updateCommand.Parameters.AddWithValue("@Brand", (updateRequestAccount.Brand == null) ? (object)DBNull.Value : updateRequestAccount.Brand);
                updateCommand.Parameters.AddWithValue("@Ogrn", (updateRequestAccount.Ogrn == null) ? (object)DBNull.Value : updateRequestAccount.Ogrn);
                updateCommand.Parameters.AddWithValue("@OgrnAuthority", (updateRequestAccount.OgrnAuthority == null) ? (object)DBNull.Value : updateRequestAccount.OgrnAuthority);
                updateCommand.Parameters.AddWithValue("@OgrnAuthorityAddress", (updateRequestAccount.OgrnAuthorityAddress == null) ? (object)DBNull.Value : updateRequestAccount.OgrnAuthorityAddress);
                updateCommand.Parameters.AddWithValue("@OgrnNum", (updateRequestAccount.OgrnNum == null) ? (object)DBNull.Value : updateRequestAccount.OgrnNum);
                updateCommand.Parameters.AddWithValue("@OgrnDate", (updateRequestAccount.OgrnDate == null) ? (object)DBNull.Value : updateRequestAccount.OgrnDate);
                updateCommand.Parameters.AddWithValue("@Inn", (updateRequestAccount.Inn == null) ? (object)DBNull.Value : updateRequestAccount.Inn);
                updateCommand.Parameters.AddWithValue("@InnAuthority", (updateRequestAccount.InnAuthority == null) ? (object)DBNull.Value : updateRequestAccount.InnAuthority);
                updateCommand.Parameters.AddWithValue("@InnNum", (updateRequestAccount.InnNum == null) ? (object)DBNull.Value : updateRequestAccount.InnNum);
                updateCommand.Parameters.AddWithValue("@InnDate", (updateRequestAccount.InnDate == null) ? (object)DBNull.Value : updateRequestAccount.InnDate);
                updateCommand.Parameters.AddWithValue("@Kpp", (updateRequestAccount.Kpp == null) ? (object)DBNull.Value : updateRequestAccount.Kpp);
                updateCommand.Parameters.AddWithValue("@Okpo", (updateRequestAccount.Okpo == null) ? (object)DBNull.Value : updateRequestAccount.Okpo);
                updateCommand.Parameters.AddWithValue("@OrgFormCode", (updateRequestAccount.OrgFormCode == null) ? (object)DBNull.Value : updateRequestAccount.OrgFormCode);
                updateCommand.Parameters.AddWithValue("@Okved", (updateRequestAccount.Okved == null) ? (object)DBNull.Value : updateRequestAccount.Okved);
                updateCommand.Parameters.AddWithValue("@Okfs", (updateRequestAccount.Okfs == null) ? (object)DBNull.Value : updateRequestAccount.Okfs);
                updateCommand.Parameters.AddWithValue("@BankName", (updateRequestAccount.BankName == null) ? (object)DBNull.Value : updateRequestAccount.BankName);
                updateCommand.Parameters.AddWithValue("@BankBik", (updateRequestAccount.BankBik == null) ? (object)DBNull.Value : updateRequestAccount.BankBik);
                updateCommand.Parameters.AddWithValue("@CorrAccount", (updateRequestAccount.CorrAccount == null) ? (object)DBNull.Value : updateRequestAccount.CorrAccount);
                updateCommand.Parameters.AddWithValue("@SetAccount", (updateRequestAccount.SetAccount == null) ? (object)DBNull.Value : updateRequestAccount.SetAccount);
                updateCommand.Parameters.AddWithValue("@Phone", (updateRequestAccount.Phone == null) ? (object)DBNull.Value : updateRequestAccount.Phone);
                updateCommand.Parameters.AddWithValue("@Fax", (updateRequestAccount.Fax == null) ? (object)DBNull.Value : updateRequestAccount.Fax);
                updateCommand.Parameters.AddWithValue("@EMail", (updateRequestAccount.EMail == null) ? (object)DBNull.Value : updateRequestAccount.EMail);
                updateCommand.Parameters.AddWithValue("@WebSite", (updateRequestAccount.WebSite == null) ? (object)DBNull.Value : updateRequestAccount.WebSite);
                updateCommand.Parameters.AddWithValue("@MessageId", updateRequestAccount.MessageId);
                updateCommand.Parameters.AddWithValue("@PostalAddress", (updateRequestAccount.PostalAddress == null) ? (object)DBNull.Value : updateRequestAccount.PostalAddress);
                updateCommand.Parameters.AddWithValue("@FactAddress", (updateRequestAccount.FactAddress == null) ? (object)DBNull.Value : updateRequestAccount.FactAddress);
                updateCommand.Parameters.AddWithValue("@RequestContact", (updateRequestAccount.RequestContact == null) ? (object)DBNull.Value : updateRequestAccount.RequestContact);
                updateCommand.Parameters.AddWithValue("@Author", SPContext.Current != null ? SPContext.Current.Web.CurrentUser.LoginName : (object)DBNull.Value);

                updateCommand.Parameters.AddWithValue("@Id", updateRequestAccount.Id);

                updateCommand.ExecuteNonQuery();
            }
            finally
            {
                thisConn.Dispose();
            }
        }
        public IList<Request> IdOfRequestAccountToDeclarantRequestAccountOfRequest(System.Nullable<System.Int32> DeclarantRequestAccount)
        {
            SqlConnection thisConn = null;
            List<Request> allEntities = new List<Request>();

            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.Connection = thisConn;
            selectCommand.CommandText = "SELECT [Id] , [Title] , [MessageId] , [DeclarantRequestAccount] , [DeclarantRequestContact] , [TrusteeRequestContact] , [ServiceProperties] , [Service] , [ServiceHeader] FROM [dbo].[Request] WHERE [DeclarantRequestAccount] = @DeclarantRequestAccount";

            selectCommand.Parameters.AddWithValue("@DeclarantRequestAccount", DeclarantRequestAccount);

            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            while (thisReader.Read())
            {
                Request entity = new Request();

                entity.Id = (System.Int32)thisReader["Id"];
                entity.Title = (System.String)thisReader["Title"];
                entity.MessageId = (System.String)thisReader["MessageId"];
                entity.DeclarantRequestAccount = thisReader["DeclarantRequestAccount"] as System.Nullable<System.Int32>;
                entity.DeclarantRequestContact = thisReader["DeclarantRequestContact"] as System.Nullable<System.Int32>;
                entity.TrusteeRequestContact = thisReader["TrusteeRequestContact"] as System.Nullable<System.Int32>;
                entity.ServiceProperties = (System.Int32)thisReader["ServiceProperties"];
                entity.Service = (System.Int32)thisReader["Service"];
                entity.ServiceHeader = (System.Int32)thisReader["ServiceHeader"];

                allEntities.Add(entity);
            }
            thisReader.Close();
            return allEntities;
        }
    }
    /// <summary>
    /// All the methods for retrieving, updating and deleting data are implemented in this class file.
    /// The samples below show the finder and specific finder method for Entity1.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("SPSF", "4.1")]
    public partial class RequestContactEntityService : CoordinateV5Service
    {
        public RequestContact ReadRequestContactItem(System.Int32 Id_Auto)
        {
            SqlConnection thisConn = null;
            RequestContact entity = null;

            entity = new RequestContact();
            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.CommandText = "SELECT [Id] , [Title] , [LastName] , [FirstName] , [MiddleName] , [Gender] , [BirthDate] , [Snils] , [Inn] , [MobilePhone] , [WorkPhone] , [HomePhone] , [EMail] , [Nation] , [Citizenship] , [CitizenshipType] , [JobTitle] , [OMSNum] , [OMSDate] , [OMSCompany] , [OMSValidityPeriod] , [IsiId] , [Id_Auto] , [MessageId] , [RegAddress] , [FactAddress] , [BirthAddress], [SingleStrRegAddress], [SingleStrFactAddress], [SingleStrBirthAddress] FROM [dbo].[RequestContact] WHERE [Id_Auto] = @Id_Auto";
            selectCommand.Parameters.AddWithValue("@Id_Auto", Id_Auto);

            selectCommand.Connection = thisConn;
            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            if (thisReader.Read())
            {
                entity.Id = (thisReader["Id"] == DBNull.Value) ? null : thisReader["Id"].ToString();
                entity.Title = (System.String)thisReader["Title"];
                entity.LastName = (thisReader["LastName"] == DBNull.Value) ? null : thisReader["LastName"].ToString();
                entity.FirstName = (thisReader["FirstName"] == DBNull.Value) ? null : thisReader["FirstName"].ToString();
                entity.MiddleName = (thisReader["MiddleName"] == DBNull.Value) ? null : thisReader["MiddleName"].ToString();
                entity.Gender = (thisReader["Gender"] == DBNull.Value) ? null : thisReader["Gender"].ToString();
                entity.BirthDate = thisReader["BirthDate"] as System.Nullable<System.DateTime>;
                entity.Snils = (thisReader["Snils"] == DBNull.Value) ? null : thisReader["Snils"].ToString();
                entity.Inn = (thisReader["Inn"] == DBNull.Value) ? null : thisReader["Inn"].ToString();
                entity.MobilePhone = (thisReader["MobilePhone"] == DBNull.Value) ? null : thisReader["MobilePhone"].ToString();
                entity.WorkPhone = (thisReader["WorkPhone"] == DBNull.Value) ? null : thisReader["WorkPhone"].ToString();
                entity.HomePhone = (thisReader["HomePhone"] == DBNull.Value) ? null : thisReader["HomePhone"].ToString();
                entity.EMail = (thisReader["EMail"] == DBNull.Value) ? null : thisReader["EMail"].ToString();
                entity.Nation = (thisReader["Nation"] == DBNull.Value) ? null : thisReader["Nation"].ToString();
                entity.Citizenship = (thisReader["Citizenship"] == DBNull.Value) ? null : thisReader["Citizenship"].ToString();
                entity.CitizenshipType = (thisReader["CitizenshipType"] == DBNull.Value) ? null : thisReader["CitizenshipType"].ToString();
                entity.JobTitle = (thisReader["JobTitle"] == DBNull.Value) ? null : thisReader["JobTitle"].ToString();
                entity.OMSNum = (thisReader["OMSNum"] == DBNull.Value) ? null : thisReader["OMSNum"].ToString();
                entity.OMSDate = thisReader["OMSDate"] as System.Nullable<System.DateTime>;
                entity.OMSCompany = (thisReader["OMSCompany"] == DBNull.Value) ? null : thisReader["OMSCompany"].ToString();
                entity.OMSValidityPeriod = (thisReader["OMSValidityPeriod"] == DBNull.Value) ? null : thisReader["OMSValidityPeriod"].ToString();
                entity.IsiId = (thisReader["IsiId"] == DBNull.Value) ? null : thisReader["IsiId"].ToString();
                entity.Id_Auto = (System.Int32)thisReader["Id_Auto"];
                entity.MessageId = (System.String)thisReader["MessageId"];
                entity.RegAddress = thisReader["RegAddress"] as System.Nullable<System.Int32>;
                entity.FactAddress = thisReader["FactAddress"] as System.Nullable<System.Int32>;
                entity.BirthAddress = thisReader["BirthAddress"] as System.Nullable<System.Int32>;
                entity.SingleStrRegAddress = (thisReader["SingleStrRegAddress"] == DBNull.Value) ? null : thisReader["SingleStrRegAddress"].ToString();
                entity.SingleStrFactAddress = (thisReader["SingleStrFactAddress"] == DBNull.Value) ? null : thisReader["SingleStrFactAddress"].ToString();
                entity.SingleStrBirthAddress = (thisReader["SingleStrBirthAddress"] == DBNull.Value) ? null : thisReader["SingleStrBirthAddress"].ToString();
            }
            else
            {
                throw new Exception("Data not found");
            }
            thisReader.Close();
            return (entity);
        }

        public IList<RequestContact> ReadRequestContactList()
        {
            SqlConnection thisConn = null;
            List<RequestContact> allEntities = new List<RequestContact>();

            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.Connection = thisConn;
            selectCommand.CommandText = "SELECT [Id] , [Title] , [LastName] , [FirstName] , [MiddleName] , [Gender] , [BirthDate] , [Snils] , [Inn] , [MobilePhone] , [WorkPhone] , [HomePhone] , [EMail] , [Nation] , [Citizenship] , [CitizenshipType] , [JobTitle] , [OMSNum] , [OMSDate] , [OMSCompany] , [OMSValidityPeriod] , [IsiId] , [Id_Auto] , [MessageId] , [RegAddress] , [FactAddress] , [BirthAddress], [SingleStrRegAddress], [SingleStrFactAddress], [SingleStrBirthAddress] FROM [dbo].[RequestContact]";
            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            while (thisReader.Read())
            {
                RequestContact entity = new RequestContact();

                entity.Id = (thisReader["Id"] == DBNull.Value) ? null : thisReader["Id"].ToString();
                entity.Title = (System.String)thisReader["Title"];
                entity.LastName = (thisReader["LastName"] == DBNull.Value) ? null : thisReader["LastName"].ToString();
                entity.FirstName = (thisReader["FirstName"] == DBNull.Value) ? null : thisReader["FirstName"].ToString();
                entity.MiddleName = (thisReader["MiddleName"] == DBNull.Value) ? null : thisReader["MiddleName"].ToString();
                entity.Gender = (thisReader["Gender"] == DBNull.Value) ? null : thisReader["Gender"].ToString();
                entity.BirthDate = thisReader["BirthDate"] as System.Nullable<System.DateTime>;
                entity.Snils = (thisReader["Snils"] == DBNull.Value) ? null : thisReader["Snils"].ToString();
                entity.Inn = (thisReader["Inn"] == DBNull.Value) ? null : thisReader["Inn"].ToString();
                entity.MobilePhone = (thisReader["MobilePhone"] == DBNull.Value) ? null : thisReader["MobilePhone"].ToString();
                entity.WorkPhone = (thisReader["WorkPhone"] == DBNull.Value) ? null : thisReader["WorkPhone"].ToString();
                entity.HomePhone = (thisReader["HomePhone"] == DBNull.Value) ? null : thisReader["HomePhone"].ToString();
                entity.EMail = (thisReader["EMail"] == DBNull.Value) ? null : thisReader["EMail"].ToString();
                entity.Nation = (thisReader["Nation"] == DBNull.Value) ? null : thisReader["Nation"].ToString();
                entity.Citizenship = (thisReader["Citizenship"] == DBNull.Value) ? null : thisReader["Citizenship"].ToString();
                entity.CitizenshipType = (thisReader["CitizenshipType"] == DBNull.Value) ? null : thisReader["CitizenshipType"].ToString();
                entity.JobTitle = (thisReader["JobTitle"] == DBNull.Value) ? null : thisReader["JobTitle"].ToString();
                entity.OMSNum = (thisReader["OMSNum"] == DBNull.Value) ? null : thisReader["OMSNum"].ToString();
                entity.OMSDate = thisReader["OMSDate"] as System.Nullable<System.DateTime>;
                entity.OMSCompany = (thisReader["OMSCompany"] == DBNull.Value) ? null : thisReader["OMSCompany"].ToString();
                entity.OMSValidityPeriod = (thisReader["OMSValidityPeriod"] == DBNull.Value) ? null : thisReader["OMSValidityPeriod"].ToString();
                entity.IsiId = (thisReader["IsiId"] == DBNull.Value) ? null : thisReader["IsiId"].ToString();
                entity.Id_Auto = (System.Int32)thisReader["Id_Auto"];
                entity.MessageId = (System.String)thisReader["MessageId"];
                entity.RegAddress = thisReader["RegAddress"] as System.Nullable<System.Int32>;
                entity.FactAddress = thisReader["FactAddress"] as System.Nullable<System.Int32>;
                entity.BirthAddress = thisReader["BirthAddress"] as System.Nullable<System.Int32>;
                entity.SingleStrRegAddress = (thisReader["SingleStrRegAddress"] == DBNull.Value) ? null : thisReader["SingleStrRegAddress"].ToString();
                entity.SingleStrFactAddress = (thisReader["SingleStrFactAddress"] == DBNull.Value) ? null : thisReader["SingleStrFactAddress"].ToString();
                entity.SingleStrBirthAddress = (thisReader["SingleStrBirthAddress"] == DBNull.Value) ? null : thisReader["SingleStrBirthAddress"].ToString();

                allEntities.Add(entity);
            }
            thisReader.Close();
            return allEntities;
        }

        public RequestContact CreateRequestContact(RequestContact newentity)
        {
            RequestContact createdEntity = null;
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                SqlCommand createCommand = new SqlCommand();
                createCommand.Connection = thisConn;
                createCommand.CommandText = "INSERT INTO [dbo].[RequestContact] ([Id] , [LastName] , [FirstName] , [MiddleName] , [Gender] , [BirthDate] , [Snils] , [Inn] , [MobilePhone] , [WorkPhone] , [HomePhone] , [EMail] , [Nation] , [Citizenship] , [CitizenshipType] , [JobTitle] , [OMSNum] , [OMSDate] , [OMSCompany] , [OMSValidityPeriod] , [IsiId] , [MessageId] , [RegAddress] , [FactAddress] , [BirthAddress] , [Author]) VALUES (@Id , @LastName , @FirstName , @MiddleName , @Gender , @BirthDate , @Snils , @Inn , @MobilePhone , @WorkPhone , @HomePhone , @EMail , @Nation , @Citizenship , @CitizenshipType , @JobTitle , @OMSNum , @OMSDate , @OMSCompany , @OMSValidityPeriod , @IsiId , @MessageId , @RegAddress , @FactAddress , @BirthAddress , @Author) SELECT [Id] , [Title] , [LastName] , [FirstName] , [MiddleName] , [Gender] , [BirthDate] , [Snils] , [Inn] , [MobilePhone] , [WorkPhone] , [HomePhone] , [EMail] , [Nation] , [Citizenship] , [CitizenshipType] , [JobTitle] , [OMSNum] , [OMSDate] , [OMSCompany] , [OMSValidityPeriod] , [IsiId] , [Id_Auto] , [MessageId] , [RegAddress] , [FactAddress] , [BirthAddress], [SingleStrRegAddress], [SingleStrFactAddress], [SingleStrBirthAddress] FROM [dbo].[RequestContact] WHERE [Id_Auto] = SCOPE_IDENTITY()";
                createCommand.Parameters.AddWithValue("@Id", (newentity.Id == null) ? (object)DBNull.Value : newentity.Id);
                createCommand.Parameters.AddWithValue("@LastName", (newentity.LastName == null) ? (object)DBNull.Value : newentity.LastName);
                createCommand.Parameters.AddWithValue("@FirstName", (newentity.FirstName == null) ? (object)DBNull.Value : newentity.FirstName);
                createCommand.Parameters.AddWithValue("@MiddleName", (newentity.MiddleName == null) ? (object)DBNull.Value : newentity.MiddleName);
                createCommand.Parameters.AddWithValue("@Gender", (newentity.Gender == null) ? (object)DBNull.Value : newentity.Gender);
                createCommand.Parameters.AddWithValue("@BirthDate", (newentity.BirthDate == null) ? (object)DBNull.Value : newentity.BirthDate);
                createCommand.Parameters.AddWithValue("@Snils", (newentity.Snils == null) ? (object)DBNull.Value : newentity.Snils);
                createCommand.Parameters.AddWithValue("@Inn", (newentity.Inn == null) ? (object)DBNull.Value : newentity.Inn);
                createCommand.Parameters.AddWithValue("@MobilePhone", (newentity.MobilePhone == null) ? (object)DBNull.Value : newentity.MobilePhone);
                createCommand.Parameters.AddWithValue("@WorkPhone", (newentity.WorkPhone == null) ? (object)DBNull.Value : newentity.WorkPhone);
                createCommand.Parameters.AddWithValue("@HomePhone", (newentity.HomePhone == null) ? (object)DBNull.Value : newentity.HomePhone);
                createCommand.Parameters.AddWithValue("@EMail", (newentity.EMail == null) ? (object)DBNull.Value : newentity.EMail);
                createCommand.Parameters.AddWithValue("@Nation", (newentity.Nation == null) ? (object)DBNull.Value : newentity.Nation);
                createCommand.Parameters.AddWithValue("@Citizenship", (newentity.Citizenship == null) ? (object)DBNull.Value : newentity.Citizenship);
                createCommand.Parameters.AddWithValue("@CitizenshipType", (newentity.CitizenshipType == null) ? (object)DBNull.Value : newentity.CitizenshipType);
                createCommand.Parameters.AddWithValue("@JobTitle", (newentity.JobTitle == null) ? (object)DBNull.Value : newentity.JobTitle);
                createCommand.Parameters.AddWithValue("@OMSNum", (newentity.OMSNum == null) ? (object)DBNull.Value : newentity.OMSNum);
                createCommand.Parameters.AddWithValue("@OMSDate", (newentity.OMSDate == null) ? (object)DBNull.Value : newentity.OMSDate);
                createCommand.Parameters.AddWithValue("@OMSCompany", (newentity.OMSCompany == null) ? (object)DBNull.Value : newentity.OMSCompany);
                createCommand.Parameters.AddWithValue("@OMSValidityPeriod", (newentity.OMSValidityPeriod == null) ? (object)DBNull.Value : newentity.OMSValidityPeriod);
                createCommand.Parameters.AddWithValue("@IsiId", (newentity.IsiId == null) ? (object)DBNull.Value : newentity.IsiId);
                createCommand.Parameters.AddWithValue("@Id_Auto", newentity.Id_Auto);
                createCommand.Parameters.AddWithValue("@MessageId", newentity.MessageId);
                createCommand.Parameters.AddWithValue("@RegAddress", (newentity.RegAddress == null) ? (object)DBNull.Value : newentity.RegAddress);
                createCommand.Parameters.AddWithValue("@FactAddress", (newentity.FactAddress == null) ? (object)DBNull.Value : newentity.FactAddress);
                createCommand.Parameters.AddWithValue("@BirthAddress", (newentity.BirthAddress == null) ? (object)DBNull.Value : newentity.BirthAddress);
                createCommand.Parameters.AddWithValue("@Author", SPContext.Current != null ? SPContext.Current.Web.CurrentUser.LoginName : (object)DBNull.Value);


                SqlDataReader thisReader = createCommand.ExecuteReader(CommandBehavior.CloseConnection);
                if (thisReader.Read())
                {
                    createdEntity = new RequestContact();

                    createdEntity.Id                    = (thisReader["Id"] == DBNull.Value) ? null : thisReader["Id"].ToString();
                    createdEntity.Title                 = (System.String)thisReader["Title"];
                    createdEntity.LastName              = (thisReader["LastName"] == DBNull.Value) ? null : thisReader["LastName"].ToString();
                    createdEntity.FirstName             = (thisReader["FirstName"] == DBNull.Value) ? null : thisReader["FirstName"].ToString();
                    createdEntity.MiddleName            = (thisReader["MiddleName"] == DBNull.Value) ? null : thisReader["MiddleName"].ToString();
                    createdEntity.Gender                = (thisReader["Gender"] == DBNull.Value) ? null : thisReader["Gender"].ToString();
                    createdEntity.BirthDate             = thisReader["BirthDate"] as System.Nullable<System.DateTime>;
                    createdEntity.Snils                 = (thisReader["Snils"] == DBNull.Value) ? null : thisReader["Snils"].ToString();
                    createdEntity.Inn                   = (thisReader["Inn"] == DBNull.Value) ? null : thisReader["Inn"].ToString();
                    createdEntity.MobilePhone           = (thisReader["MobilePhone"] == DBNull.Value) ? null : thisReader["MobilePhone"].ToString();
                    createdEntity.WorkPhone             = (thisReader["WorkPhone"] == DBNull.Value) ? null : thisReader["WorkPhone"].ToString();
                    createdEntity.HomePhone             = (thisReader["HomePhone"] == DBNull.Value) ? null : thisReader["HomePhone"].ToString();
                    createdEntity.EMail                 = (thisReader["EMail"] == DBNull.Value) ? null : thisReader["EMail"].ToString();
                    createdEntity.Nation                = (thisReader["Nation"] == DBNull.Value) ? null : thisReader["Nation"].ToString();
                    createdEntity.Citizenship           = (thisReader["Citizenship"] == DBNull.Value) ? null : thisReader["Citizenship"].ToString();
                    createdEntity.CitizenshipType       = (thisReader["CitizenshipType"] == DBNull.Value) ? null : thisReader["CitizenshipType"].ToString();
                    createdEntity.JobTitle              = (thisReader["JobTitle"] == DBNull.Value) ? null : thisReader["JobTitle"].ToString();
                    createdEntity.OMSNum                = (thisReader["OMSNum"] == DBNull.Value) ? null : thisReader["OMSNum"].ToString();
                    createdEntity.OMSDate               = thisReader["OMSDate"] as System.Nullable<System.DateTime>;
                    createdEntity.OMSCompany            = (thisReader["OMSCompany"] == DBNull.Value) ? null : thisReader["OMSCompany"].ToString();
                    createdEntity.OMSValidityPeriod     = (thisReader["OMSValidityPeriod"] == DBNull.Value) ? null : thisReader["OMSValidityPeriod"].ToString();
                    createdEntity.IsiId                 = (thisReader["IsiId"] == DBNull.Value) ? null : thisReader["IsiId"].ToString();
                    createdEntity.Id_Auto               = (System.Int32)thisReader["Id_Auto"];
                    createdEntity.MessageId             = (System.String)thisReader["MessageId"];
                    createdEntity.RegAddress            = thisReader["RegAddress"] as System.Nullable<System.Int32>;
                    createdEntity.FactAddress           = thisReader["FactAddress"] as System.Nullable<System.Int32>;
                    createdEntity.BirthAddress          = thisReader["BirthAddress"] as System.Nullable<System.Int32>;
                    createdEntity.SingleStrRegAddress   = (thisReader["SingleStrRegAddress"] == DBNull.Value) ? null : thisReader["SingleStrRegAddress"].ToString();
                    createdEntity.SingleStrFactAddress  = (thisReader["SingleStrFactAddress"] == DBNull.Value) ? null : thisReader["SingleStrFactAddress"].ToString();
                    createdEntity.SingleStrBirthAddress = (thisReader["SingleStrBirthAddress"] == DBNull.Value) ? null : thisReader["SingleStrBirthAddress"].ToString();
                }
                else
                {
                    throw new Exception("Data not found");
                }
                return createdEntity;
            }
            finally
            {
                thisConn.Dispose();
            }
        }

        public void DeleteRequestContact(System.Int32 Id_Auto)
        {
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                SqlCommand deleteCommand = new SqlCommand();
                deleteCommand.Connection = thisConn;
                deleteCommand.CommandText = "DELETE FROM [dbo].[RequestContact] WHERE [Id_Auto] = @Id_Auto";
                deleteCommand.Parameters.AddWithValue("@Id_Auto", Id_Auto);
                deleteCommand.ExecuteNonQuery();
            }
            finally
            {
                thisConn.Dispose();
            }

        }


        public void UpdateRequestContact(RequestContact updateRequestContact)
        {
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                SqlCommand updateCommand = new SqlCommand();
                updateCommand.Connection = thisConn;
                updateCommand.CommandText = "UPDATE [dbo].[RequestContact] SET [Id] = @Id , [LastName] = @LastName , [FirstName] = @FirstName , [MiddleName] = @MiddleName , [Gender] = @Gender , [BirthDate] = @BirthDate , [Snils] = @Snils , [Inn] = @Inn , [MobilePhone] = @MobilePhone , [WorkPhone] = @WorkPhone , [HomePhone] = @HomePhone , [EMail] = @EMail , [Nation] = @Nation , [Citizenship] = @Citizenship , [CitizenshipType] = @CitizenshipType , [JobTitle] = @JobTitle , [OMSNum] = @OMSNum , [OMSDate] = @OMSDate , [OMSCompany] = @OMSCompany , [OMSValidityPeriod] = @OMSValidityPeriod , [IsiId] = @IsiId , [MessageId] = @MessageId , [RegAddress] = @RegAddress , [FactAddress] = @FactAddress , [BirthAddress] = @BirthAddress , [Author] = @Author WHERE [Id_Auto] = @Id_Auto";

                //add new field values
                updateCommand.Parameters.AddWithValue("@Id", (updateRequestContact.Id == null) ? (object)DBNull.Value : updateRequestContact.Id);
                updateCommand.Parameters.AddWithValue("@LastName", (updateRequestContact.LastName == null) ? (object)DBNull.Value : updateRequestContact.LastName);
                updateCommand.Parameters.AddWithValue("@FirstName", (updateRequestContact.FirstName == null) ? (object)DBNull.Value : updateRequestContact.FirstName);
                updateCommand.Parameters.AddWithValue("@MiddleName", (updateRequestContact.MiddleName == null) ? (object)DBNull.Value : updateRequestContact.MiddleName);
                updateCommand.Parameters.AddWithValue("@Gender", (updateRequestContact.Gender == null) ? (object)DBNull.Value : updateRequestContact.Gender);
                updateCommand.Parameters.AddWithValue("@BirthDate", (updateRequestContact.BirthDate == null) ? (object)DBNull.Value : updateRequestContact.BirthDate);
                updateCommand.Parameters.AddWithValue("@Snils", (updateRequestContact.Snils == null) ? (object)DBNull.Value : updateRequestContact.Snils);
                updateCommand.Parameters.AddWithValue("@Inn", (updateRequestContact.Inn == null) ? (object)DBNull.Value : updateRequestContact.Inn);
                updateCommand.Parameters.AddWithValue("@MobilePhone", (updateRequestContact.MobilePhone == null) ? (object)DBNull.Value : updateRequestContact.MobilePhone);
                updateCommand.Parameters.AddWithValue("@WorkPhone", (updateRequestContact.WorkPhone == null) ? (object)DBNull.Value : updateRequestContact.WorkPhone);
                updateCommand.Parameters.AddWithValue("@HomePhone", (updateRequestContact.HomePhone == null) ? (object)DBNull.Value : updateRequestContact.HomePhone);
                updateCommand.Parameters.AddWithValue("@EMail", (updateRequestContact.EMail == null) ? (object)DBNull.Value : updateRequestContact.EMail);
                updateCommand.Parameters.AddWithValue("@Nation", (updateRequestContact.Nation == null) ? (object)DBNull.Value : updateRequestContact.Nation);
                updateCommand.Parameters.AddWithValue("@Citizenship", (updateRequestContact.Citizenship == null) ? (object)DBNull.Value : updateRequestContact.Citizenship);
                updateCommand.Parameters.AddWithValue("@CitizenshipType", (updateRequestContact.CitizenshipType == null) ? (object)DBNull.Value : updateRequestContact.CitizenshipType);
                updateCommand.Parameters.AddWithValue("@JobTitle", (updateRequestContact.JobTitle == null) ? (object)DBNull.Value : updateRequestContact.JobTitle);
                updateCommand.Parameters.AddWithValue("@OMSNum", (updateRequestContact.OMSNum == null) ? (object)DBNull.Value : updateRequestContact.OMSNum);
                updateCommand.Parameters.AddWithValue("@OMSDate", (updateRequestContact.OMSDate == null) ? (object)DBNull.Value : updateRequestContact.OMSDate);
                updateCommand.Parameters.AddWithValue("@OMSCompany", (updateRequestContact.OMSCompany == null) ? (object)DBNull.Value : updateRequestContact.OMSCompany);
                updateCommand.Parameters.AddWithValue("@OMSValidityPeriod", (updateRequestContact.OMSValidityPeriod == null) ? (object)DBNull.Value : updateRequestContact.OMSValidityPeriod);
                updateCommand.Parameters.AddWithValue("@IsiId", (updateRequestContact.IsiId == null) ? (object)DBNull.Value : updateRequestContact.IsiId);
                updateCommand.Parameters.AddWithValue("@MessageId", updateRequestContact.MessageId);
                updateCommand.Parameters.AddWithValue("@RegAddress", (updateRequestContact.RegAddress == null) ? (object)DBNull.Value : updateRequestContact.RegAddress);
                updateCommand.Parameters.AddWithValue("@FactAddress", (updateRequestContact.FactAddress == null) ? (object)DBNull.Value : updateRequestContact.FactAddress);
                updateCommand.Parameters.AddWithValue("@BirthAddress", (updateRequestContact.BirthAddress == null) ? (object)DBNull.Value : updateRequestContact.BirthAddress);
                updateCommand.Parameters.AddWithValue("@Author", SPContext.Current != null ? SPContext.Current.Web.CurrentUser.LoginName : (object)DBNull.Value);

                updateCommand.Parameters.AddWithValue("@Id_Auto", updateRequestContact.Id_Auto);

                updateCommand.ExecuteNonQuery();
            }
            finally
            {
                thisConn.Dispose();
            }
        }
        public IList<Request> Id_AutoOfRequestContactToDeclarantRequestContactOfRequest(System.Nullable<System.Int32> DeclarantRequestContact)
        {
            SqlConnection thisConn = null;
            List<Request> allEntities = new List<Request>();

            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.Connection = thisConn;
            selectCommand.CommandText = "SELECT [Id] , [Title] , [MessageId] , [DeclarantRequestAccount] , [DeclarantRequestContact] , [TrusteeRequestContact] , [ServiceProperties] , [Service] , [ServiceHeader] FROM [dbo].[Request] WHERE [DeclarantRequestContact] = @DeclarantRequestContact";

            selectCommand.Parameters.AddWithValue("@DeclarantRequestContact", DeclarantRequestContact);

            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            while (thisReader.Read())
            {
                Request entity = new Request();

                entity.Id = (System.Int32)thisReader["Id"];
                entity.Title = (System.String)thisReader["Title"];
                entity.MessageId = (System.String)thisReader["MessageId"];
                entity.DeclarantRequestAccount = thisReader["DeclarantRequestAccount"] as System.Nullable<System.Int32>;
                entity.DeclarantRequestContact = thisReader["DeclarantRequestContact"] as System.Nullable<System.Int32>;
                entity.TrusteeRequestContact = thisReader["TrusteeRequestContact"] as System.Nullable<System.Int32>;
                entity.ServiceProperties = (System.Int32)thisReader["ServiceProperties"];
                entity.Service = (System.Int32)thisReader["Service"];
                entity.ServiceHeader = (System.Int32)thisReader["ServiceHeader"];

                allEntities.Add(entity);
            }
            thisReader.Close();
            return allEntities;
        }
        public IList<Request> Id_AutoOfRequestContactToTrusteeRequestContactOfRequest(System.Nullable<System.Int32> TrusteeRequestContact)
        {
            SqlConnection thisConn = null;
            List<Request> allEntities = new List<Request>();

            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.Connection = thisConn;
            selectCommand.CommandText = "SELECT [Id] , [Title] , [MessageId] , [DeclarantRequestAccount] , [DeclarantRequestContact] , [TrusteeRequestContact] , [ServiceProperties] , [Service] , [ServiceHeader] FROM [dbo].[Request] WHERE [TrusteeRequestContact] = @TrusteeRequestContact";

            selectCommand.Parameters.AddWithValue("@TrusteeRequestContact", TrusteeRequestContact);

            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            while (thisReader.Read())
            {
                Request entity = new Request();

                entity.Id = (System.Int32)thisReader["Id"];
                entity.Title = (System.String)thisReader["Title"];
                entity.MessageId = (System.String)thisReader["MessageId"];
                entity.DeclarantRequestAccount = thisReader["DeclarantRequestAccount"] as System.Nullable<System.Int32>;
                entity.DeclarantRequestContact = thisReader["DeclarantRequestContact"] as System.Nullable<System.Int32>;
                entity.TrusteeRequestContact = thisReader["TrusteeRequestContact"] as System.Nullable<System.Int32>;
                entity.ServiceProperties = (System.Int32)thisReader["ServiceProperties"];
                entity.Service = (System.Int32)thisReader["Service"];
                entity.ServiceHeader = (System.Int32)thisReader["ServiceHeader"];

                allEntities.Add(entity);
            }
            thisReader.Close();
            return allEntities;
        }
        public IList<RequestAccount> Id_AutoOfRequestContactToRequestContactOfRequestAccount(System.Nullable<System.Int32> RequestContact)
        {
            SqlConnection thisConn = null;
            List<RequestAccount> allEntities = new List<RequestAccount>();

            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.Connection = thisConn;
            selectCommand.CommandText = "SELECT [Title] , [FullName] , [Name] , [BrandName] , [Brand] , [Ogrn] , [OgrnAuthority] , [OgrnAuthorityAddress] , [OgrnNum] , [OgrnDate] , [Inn] , [InnAuthority] , [InnNum] , [InnDate] , [Kpp] , [Okpo] , [OrgFormCode] , [Okved] , [Okfs] , [BankName] , [BankBik] , [CorrAccount] , [SetAccount] , [Phone] , [Fax] , [EMail] , [WebSite] , [Id] , [MessageId] , [PostalAddress] , [FactAddress] , [RequestContact], [SingleStrPostalAddress], [SingleStrFactAddress] FROM [dbo].[RequestAccount] WHERE [RequestContact] = @RequestContact";

            selectCommand.Parameters.AddWithValue("@RequestContact", RequestContact);

            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            while (thisReader.Read())
            {
                RequestAccount entity = new RequestAccount();

                entity.Title = (thisReader["Title"] == DBNull.Value) ? null : thisReader["Title"].ToString();
                entity.FullName = (thisReader["FullName"] == DBNull.Value) ? null : thisReader["FullName"].ToString();
                entity.Name = (thisReader["Name"] == DBNull.Value) ? null : thisReader["Name"].ToString();
                entity.BrandName = (thisReader["BrandName"] == DBNull.Value) ? null : thisReader["BrandName"].ToString();
                entity.Brand = (thisReader["Brand"] == DBNull.Value) ? null : thisReader["Brand"].ToString();
                entity.Ogrn = (thisReader["Ogrn"] == DBNull.Value) ? null : thisReader["Ogrn"].ToString();
                entity.OgrnAuthority = (thisReader["OgrnAuthority"] == DBNull.Value) ? null : thisReader["OgrnAuthority"].ToString();
                entity.OgrnAuthorityAddress = (thisReader["OgrnAuthorityAddress"] == DBNull.Value) ? null : thisReader["OgrnAuthorityAddress"].ToString();
                entity.OgrnNum = (thisReader["OgrnNum"] == DBNull.Value) ? null : thisReader["OgrnNum"].ToString();
                entity.OgrnDate = thisReader["OgrnDate"] as System.Nullable<System.DateTime>;
                entity.Inn = (thisReader["Inn"] == DBNull.Value) ? null : thisReader["Inn"].ToString();
                entity.InnAuthority = (thisReader["InnAuthority"] == DBNull.Value) ? null : thisReader["InnAuthority"].ToString();
                entity.InnNum = (thisReader["InnNum"] == DBNull.Value) ? null : thisReader["InnNum"].ToString();
                entity.InnDate = thisReader["InnDate"] as System.Nullable<System.DateTime>;
                entity.Kpp = (thisReader["Kpp"] == DBNull.Value) ? null : thisReader["Kpp"].ToString();
                entity.Okpo = (thisReader["Okpo"] == DBNull.Value) ? null : thisReader["Okpo"].ToString();
                entity.OrgFormCode = (thisReader["OrgFormCode"] == DBNull.Value) ? null : thisReader["OrgFormCode"].ToString();
                entity.Okved = (thisReader["Okved"] == DBNull.Value) ? null : thisReader["Okved"].ToString();
                entity.Okfs = (thisReader["Okfs"] == DBNull.Value) ? null : thisReader["Okfs"].ToString();
                entity.BankName = (thisReader["BankName"] == DBNull.Value) ? null : thisReader["BankName"].ToString();
                entity.BankBik = (thisReader["BankBik"] == DBNull.Value) ? null : thisReader["BankBik"].ToString();
                entity.CorrAccount = (thisReader["CorrAccount"] == DBNull.Value) ? null : thisReader["CorrAccount"].ToString();
                entity.SetAccount = (thisReader["SetAccount"] == DBNull.Value) ? null : thisReader["SetAccount"].ToString();
                entity.Phone = (thisReader["Phone"] == DBNull.Value) ? null : thisReader["Phone"].ToString();
                entity.Fax = (thisReader["Fax"] == DBNull.Value) ? null : thisReader["Fax"].ToString();
                entity.EMail = (thisReader["EMail"] == DBNull.Value) ? null : thisReader["EMail"].ToString();
                entity.WebSite = (thisReader["WebSite"] == DBNull.Value) ? null : thisReader["WebSite"].ToString();
                entity.Id = (System.Int32)thisReader["Id"];
                entity.MessageId = (System.String)thisReader["MessageId"];
                entity.PostalAddress = thisReader["PostalAddress"] as System.Nullable<System.Int32>;
                entity.FactAddress = thisReader["FactAddress"] as System.Nullable<System.Int32>;
                entity.RequestContact = thisReader["RequestContact"] as System.Nullable<System.Int32>;
                entity.SingleStrPostalAddress = (thisReader["SingleStrPostalAddress"] == DBNull.Value) ? null : thisReader["SingleStrPostalAddress"].ToString();
                entity.SingleStrFactAddress = (thisReader["SingleStrFactAddress"] == DBNull.Value) ? null : thisReader["SingleStrFactAddress"].ToString();

                allEntities.Add(entity);
            }
            thisReader.Close();
            return allEntities;
        }
    }
    /// <summary>
    /// All the methods for retrieving, updating and deleting data are implemented in this class file.
    /// The samples below show the finder and specific finder method for Entity1.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("SPSF", "4.1")]
    public class ServiceEntityService : CoordinateV5Service
    {
        public Service ReadServiceItem(System.Int32 Id)
        {
            SqlConnection thisConn = null;
            Service entity = null;

            entity = new Service();
            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.CommandText = "SELECT [Title] , [RegNum] , [RegDate] , [ServiceNumber] , [ServiceTypeCode] , [ServicePrice] , [PrepareTargetDate] , [OutputTargetDate] , [Copies] , [PrepareFactDate] , [OutputFactDate] , [Id] , [MessageId] FROM [dbo].[Service] WHERE [Id] = @Id";
            selectCommand.Parameters.AddWithValue("@Id", Id);

            selectCommand.Connection = thisConn;
            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            if (thisReader.Read())
            {
                entity.Title = (thisReader["Title"] == DBNull.Value) ? null : thisReader["Title"].ToString();
                entity.RegNum = (thisReader["RegNum"] == DBNull.Value) ? null : thisReader["RegNum"].ToString();
                entity.RegDate = thisReader["RegDate"] as System.Nullable<System.DateTime>;
                entity.ServiceNumber = (thisReader["ServiceNumber"] == DBNull.Value) ? null : thisReader["ServiceNumber"].ToString();
                entity.ServiceTypeCode = (thisReader["ServiceTypeCode"] == DBNull.Value) ? null : thisReader["ServiceTypeCode"].ToString();
                entity.ServicePrice = thisReader["ServicePrice"] as System.Nullable<System.Decimal>;
                entity.PrepareTargetDate = thisReader["PrepareTargetDate"] as System.Nullable<System.DateTime>;
                entity.OutputTargetDate = thisReader["OutputTargetDate"] as System.Nullable<System.DateTime>;
                entity.Copies = thisReader["Copies"] as System.Nullable<System.Int32>;
                entity.PrepareFactDate = thisReader["PrepareFactDate"] as System.Nullable<System.DateTime>;
                entity.OutputFactDate = thisReader["OutputFactDate"] as System.Nullable<System.DateTime>;
                entity.Id = (System.Int32)thisReader["Id"];
                entity.MessageId = (System.String)thisReader["MessageId"];
            }
            else
            {
                throw new Exception("Data not found");
            }
            thisReader.Close();
            return (entity);
        }

        public IList<Service> ReadServiceList()
        {
            SqlConnection thisConn = null;
            List<Service> allEntities = new List<Service>();

            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.Connection = thisConn;
            selectCommand.CommandText = "SELECT [Title] , [RegNum] , [RegDate] , [ServiceNumber] , [ServiceTypeCode] , [ServicePrice] , [PrepareTargetDate] , [OutputTargetDate] , [Copies] , [PrepareFactDate] , [OutputFactDate] , [Id] , [MessageId] FROM [dbo].[Service]";
            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            while (thisReader.Read())
            {
                Service entity = new Service();

                entity.Title = (thisReader["Title"] == DBNull.Value) ? null : thisReader["Title"].ToString();
                entity.RegNum = (thisReader["RegNum"] == DBNull.Value) ? null : thisReader["RegNum"].ToString();
                entity.RegDate = thisReader["RegDate"] as System.Nullable<System.DateTime>;
                entity.ServiceNumber = (thisReader["ServiceNumber"] == DBNull.Value) ? null : thisReader["ServiceNumber"].ToString();
                entity.ServiceTypeCode = (thisReader["ServiceTypeCode"] == DBNull.Value) ? null : thisReader["ServiceTypeCode"].ToString();
                entity.ServicePrice = thisReader["ServicePrice"] as System.Nullable<System.Decimal>;
                entity.PrepareTargetDate = thisReader["PrepareTargetDate"] as System.Nullable<System.DateTime>;
                entity.OutputTargetDate = thisReader["OutputTargetDate"] as System.Nullable<System.DateTime>;
                entity.Copies = thisReader["Copies"] as System.Nullable<System.Int32>;
                entity.PrepareFactDate = thisReader["PrepareFactDate"] as System.Nullable<System.DateTime>;
                entity.OutputFactDate = thisReader["OutputFactDate"] as System.Nullable<System.DateTime>;
                entity.Id = (System.Int32)thisReader["Id"];
                entity.MessageId = (System.String)thisReader["MessageId"];

                allEntities.Add(entity);
            }
            thisReader.Close();
            return allEntities;
        }

        public Service CreateService(Service newentity)
        {
            Service createdEntity = null;
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                SqlCommand createCommand = new SqlCommand();
                createCommand.Connection = thisConn;
                createCommand.CommandText = "INSERT INTO [dbo].[Service] ([Title] , [RegNum] , [RegDate] , [ServiceNumber] , [ServiceTypeCode] , [ServicePrice] , [PrepareTargetDate] , [OutputTargetDate] , [Copies] , [PrepareFactDate] , [OutputFactDate] , [MessageId]) VALUES (@Title , @RegNum , @RegDate , @ServiceNumber , @ServiceTypeCode , @ServicePrice , @PrepareTargetDate , @OutputTargetDate , @Copies , @PrepareFactDate , @OutputFactDate , @MessageId) SELECT [Title] , [RegNum] , [RegDate] , [ServiceNumber] , [ServiceTypeCode] , [ServicePrice] , [PrepareTargetDate] , [OutputTargetDate] , [Copies] , [PrepareFactDate] , [OutputFactDate] , [Id] , [MessageId] FROM [dbo].[Service] WHERE [Id] = SCOPE_IDENTITY()";
                createCommand.Parameters.AddWithValue("@Title", (newentity.Title == null) ? (object)DBNull.Value : newentity.Title);
                createCommand.Parameters.AddWithValue("@RegNum", (newentity.RegNum == null) ? (object)DBNull.Value : newentity.RegNum);
                createCommand.Parameters.AddWithValue("@RegDate", (newentity.RegDate == null) ? (object)DBNull.Value : newentity.RegDate);
                createCommand.Parameters.AddWithValue("@ServiceNumber", (newentity.ServiceNumber == null) ? (object)DBNull.Value : newentity.ServiceNumber);
                createCommand.Parameters.AddWithValue("@ServiceTypeCode", (newentity.ServiceTypeCode == null) ? (object)DBNull.Value : newentity.ServiceTypeCode);
                createCommand.Parameters.AddWithValue("@ServicePrice", (newentity.ServicePrice == null) ? (object)DBNull.Value : newentity.ServicePrice);
                createCommand.Parameters.AddWithValue("@PrepareTargetDate", (newentity.PrepareTargetDate == null) ? (object)DBNull.Value : newentity.PrepareTargetDate);
                createCommand.Parameters.AddWithValue("@OutputTargetDate", (newentity.OutputTargetDate == null) ? (object)DBNull.Value : newentity.OutputTargetDate);
                createCommand.Parameters.AddWithValue("@Copies", (newentity.Copies == null) ? (object)DBNull.Value : newentity.Copies);
                createCommand.Parameters.AddWithValue("@PrepareFactDate", (newentity.PrepareFactDate == null) ? (object)DBNull.Value : newentity.PrepareFactDate);
                createCommand.Parameters.AddWithValue("@OutputFactDate", (newentity.OutputFactDate == null) ? (object)DBNull.Value : newentity.OutputFactDate);
                createCommand.Parameters.AddWithValue("@Id", newentity.Id);
                createCommand.Parameters.AddWithValue("@MessageId", newentity.MessageId);


                SqlDataReader thisReader = createCommand.ExecuteReader(CommandBehavior.CloseConnection);
                if (thisReader.Read())
                {
                    createdEntity = new Service();

                    createdEntity.Title = (thisReader["Title"] == DBNull.Value) ? null : thisReader["Title"].ToString();
                    createdEntity.RegNum = (thisReader["RegNum"] == DBNull.Value) ? null : thisReader["RegNum"].ToString();
                    createdEntity.RegDate = thisReader["RegDate"] as System.Nullable<System.DateTime>;
                    createdEntity.ServiceNumber = (thisReader["ServiceNumber"] == DBNull.Value) ? null : thisReader["ServiceNumber"].ToString();
                    createdEntity.ServiceTypeCode = (thisReader["ServiceTypeCode"] == DBNull.Value) ? null : thisReader["ServiceTypeCode"].ToString();
                    createdEntity.ServicePrice = thisReader["ServicePrice"] as System.Nullable<System.Decimal>;
                    createdEntity.PrepareTargetDate = thisReader["PrepareTargetDate"] as System.Nullable<System.DateTime>;
                    createdEntity.OutputTargetDate = thisReader["OutputTargetDate"] as System.Nullable<System.DateTime>;
                    createdEntity.Copies = thisReader["Copies"] as System.Nullable<System.Int32>;
                    createdEntity.PrepareFactDate = thisReader["PrepareFactDate"] as System.Nullable<System.DateTime>;
                    createdEntity.OutputFactDate = thisReader["OutputFactDate"] as System.Nullable<System.DateTime>;
                    createdEntity.Id = (System.Int32)thisReader["Id"];
                    createdEntity.MessageId = (System.String)thisReader["MessageId"];
                }
                else
                {
                    throw new Exception("Data not found");
                }
                return createdEntity;
            }
            finally
            {
                thisConn.Dispose();
            }
        }

        public void DeleteService(System.Int32 Id)
        {
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                SqlCommand deleteCommand = new SqlCommand();
                deleteCommand.Connection = thisConn;
                deleteCommand.CommandText = "DELETE FROM [dbo].[Service] WHERE [Id] = @Id";
                deleteCommand.Parameters.AddWithValue("@Id", Id);
                deleteCommand.ExecuteNonQuery();
            }
            finally
            {
                thisConn.Dispose();
            }

        }


        public void UpdateService(Service updateService)
        {
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                SqlCommand updateCommand = new SqlCommand();
                updateCommand.Connection = thisConn;
                updateCommand.CommandText = "UPDATE [dbo].[Service] SET [Title] = @Title , [RegNum] = @RegNum , [RegDate] = @RegDate , [ServiceNumber] = @ServiceNumber , [ServiceTypeCode] = @ServiceTypeCode , [ServicePrice] = @ServicePrice , [PrepareTargetDate] = @PrepareTargetDate , [OutputTargetDate] = @OutputTargetDate , [Copies] = @Copies , [PrepareFactDate] = @PrepareFactDate , [OutputFactDate] = @OutputFactDate , [MessageId] = @MessageId WHERE [Id] = @Id";

                //add new field values
                updateCommand.Parameters.AddWithValue("@Title", (updateService.Title == null) ? (object)DBNull.Value : updateService.Title);
                updateCommand.Parameters.AddWithValue("@RegNum", (updateService.RegNum == null) ? (object)DBNull.Value : updateService.RegNum);
                updateCommand.Parameters.AddWithValue("@RegDate", (updateService.RegDate == null) ? (object)DBNull.Value : updateService.RegDate);
                updateCommand.Parameters.AddWithValue("@ServiceNumber", (updateService.ServiceNumber == null) ? (object)DBNull.Value : updateService.ServiceNumber);
                updateCommand.Parameters.AddWithValue("@ServiceTypeCode", (updateService.ServiceTypeCode == null) ? (object)DBNull.Value : updateService.ServiceTypeCode);
                updateCommand.Parameters.AddWithValue("@ServicePrice", (updateService.ServicePrice == null) ? (object)DBNull.Value : updateService.ServicePrice);
                updateCommand.Parameters.AddWithValue("@PrepareTargetDate", (updateService.PrepareTargetDate == null) ? (object)DBNull.Value : updateService.PrepareTargetDate);
                updateCommand.Parameters.AddWithValue("@OutputTargetDate", (updateService.OutputTargetDate == null) ? (object)DBNull.Value : updateService.OutputTargetDate);
                updateCommand.Parameters.AddWithValue("@Copies", (updateService.Copies == null) ? (object)DBNull.Value : updateService.Copies);
                updateCommand.Parameters.AddWithValue("@PrepareFactDate", (updateService.PrepareFactDate == null) ? (object)DBNull.Value : updateService.PrepareFactDate);
                updateCommand.Parameters.AddWithValue("@OutputFactDate", (updateService.OutputFactDate == null) ? (object)DBNull.Value : updateService.OutputFactDate);
                updateCommand.Parameters.AddWithValue("@MessageId", updateService.MessageId);

                updateCommand.Parameters.AddWithValue("@Id", updateService.Id);

                updateCommand.ExecuteNonQuery();
            }
            finally
            {
                thisConn.Dispose();
            }
        }
        public IList<Request> IdOfServiceToServiceOfRequest(System.Int32 Service)
        {
            SqlConnection thisConn = null;
            List<Request> allEntities = new List<Request>();

            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.Connection = thisConn;
            selectCommand.CommandText = "SELECT [Id] , [Title] , [MessageId] , [DeclarantRequestAccount] , [DeclarantRequestContact] , [TrusteeRequestContact] , [ServiceProperties] , [Service] , [ServiceHeader] FROM [dbo].[Request] WHERE [Service] = @Service";

            selectCommand.Parameters.AddWithValue("@Service", Service);

            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            while (thisReader.Read())
            {
                Request entity = new Request();

                entity.Id = (System.Int32)thisReader["Id"];
                entity.Title = (System.String)thisReader["Title"];
                entity.MessageId = (System.String)thisReader["MessageId"];
                entity.DeclarantRequestAccount = thisReader["DeclarantRequestAccount"] as System.Nullable<System.Int32>;
                entity.DeclarantRequestContact = thisReader["DeclarantRequestContact"] as System.Nullable<System.Int32>;
                entity.TrusteeRequestContact = thisReader["TrusteeRequestContact"] as System.Nullable<System.Int32>;
                entity.ServiceProperties = (System.Int32)thisReader["ServiceProperties"];
                entity.Service = (System.Int32)thisReader["Service"];
                entity.ServiceHeader = (System.Int32)thisReader["ServiceHeader"];

                allEntities.Add(entity);
            }
            thisReader.Close();
            return allEntities;
        }
        public IList<ServiceDocument> IdOfServiceToServiceOfServiceDocument(System.Int32 Service)
        {
            SqlConnection thisConn = null;
            List<ServiceDocument> allEntities = new List<ServiceDocument>();

            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.Connection = thisConn;
            selectCommand.CommandText = "SELECT [Id] , [Title] , [DocCode] , [DocSubType] , [DocPerson] , [DocSerie] , [DocNumber] , [DocDate] , [ValidityPeriod] , [WhoSign] , [ListCount] , [CopyCount] , [DivisionCode] , [Id_Auto] , [MessageId] , [Service] FROM [dbo].[ServiceDocument] WHERE [Service] = @Service";

            selectCommand.Parameters.AddWithValue("@Service", Service);

            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            while (thisReader.Read())
            {
                ServiceDocument entity = new ServiceDocument();

                entity.Id = (thisReader["Id"] == DBNull.Value) ? null : thisReader["Id"].ToString();
                entity.Title = (thisReader["Title"] == DBNull.Value) ? null : thisReader["Title"].ToString();
                entity.DocCode = (thisReader["DocCode"] == DBNull.Value) ? null : thisReader["DocCode"].ToString();
                entity.DocSubType = (thisReader["DocSubType"] == DBNull.Value) ? null : thisReader["DocSubType"].ToString();
                entity.DocPerson = (thisReader["DocPerson"] == DBNull.Value) ? null : thisReader["DocPerson"].ToString();
                entity.DocSerie = (thisReader["DocSerie"] == DBNull.Value) ? null : thisReader["DocSerie"].ToString();
                entity.DocNumber = (thisReader["DocNumber"] == DBNull.Value) ? null : thisReader["DocNumber"].ToString();
                entity.DocDate = thisReader["DocDate"] as System.Nullable<System.DateTime>;
                entity.ValidityPeriod = (thisReader["ValidityPeriod"] == DBNull.Value) ? null : thisReader["ValidityPeriod"].ToString();
                entity.WhoSign = (thisReader["WhoSign"] == DBNull.Value) ? null : thisReader["WhoSign"].ToString();
                entity.ListCount = thisReader["ListCount"] as System.Nullable<System.Int32>;
                entity.CopyCount = thisReader["CopyCount"] as System.Nullable<System.Int32>;
                entity.DivisionCode = (thisReader["DivisionCode"] == DBNull.Value) ? null : thisReader["DivisionCode"].ToString();
                entity.Id_Auto = (System.Int32)thisReader["Id_Auto"];
                entity.MessageId = (System.String)thisReader["MessageId"];
                entity.Service = (System.Int32)thisReader["Service"];

                allEntities.Add(entity);
            }
            thisReader.Close();
            return allEntities;
        }
    }
    /// <summary>
    /// All the methods for retrieving, updating and deleting data are implemented in this class file.
    /// The samples below show the finder and specific finder method for Entity1.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("SPSF", "4.1")]
    public class ServiceDocumentEntityService : CoordinateV5Service
    {
        public ServiceDocument ReadServiceDocumentItem(System.Int32 Id_Auto)
        {
            SqlConnection thisConn = null;
            ServiceDocument entity = null;

            entity = new ServiceDocument();
            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.CommandText = "SELECT [Id] , [Title] , [DocCode] , [DocSubType] , [DocPerson] , [DocSerie] , [DocNumber] , [DocDate] , [ValidityPeriod] , [WhoSign] , [ListCount] , [CopyCount] , [DivisionCode] , [Id_Auto] , [MessageId] , [Service] FROM [dbo].[ServiceDocument] WHERE [Id_Auto] = @Id_Auto";
            selectCommand.Parameters.AddWithValue("@Id_Auto", Id_Auto);

            selectCommand.Connection = thisConn;
            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            if (thisReader.Read())
            {
                entity.Id = (thisReader["Id"] == DBNull.Value) ? null : thisReader["Id"].ToString();
                entity.Title = (thisReader["Title"] == DBNull.Value) ? null : thisReader["Title"].ToString();
                entity.DocCode = (thisReader["DocCode"] == DBNull.Value) ? null : thisReader["DocCode"].ToString();
                entity.DocSubType = (thisReader["DocSubType"] == DBNull.Value) ? null : thisReader["DocSubType"].ToString();
                entity.DocPerson = (thisReader["DocPerson"] == DBNull.Value) ? null : thisReader["DocPerson"].ToString();
                entity.DocSerie = (thisReader["DocSerie"] == DBNull.Value) ? null : thisReader["DocSerie"].ToString();
                entity.DocNumber = (thisReader["DocNumber"] == DBNull.Value) ? null : thisReader["DocNumber"].ToString();
                entity.DocDate = thisReader["DocDate"] as System.Nullable<System.DateTime>;
                entity.ValidityPeriod = (thisReader["ValidityPeriod"] == DBNull.Value) ? null : thisReader["ValidityPeriod"].ToString();
                entity.WhoSign = (thisReader["WhoSign"] == DBNull.Value) ? null : thisReader["WhoSign"].ToString();
                entity.ListCount = thisReader["ListCount"] as System.Nullable<System.Int32>;
                entity.CopyCount = thisReader["CopyCount"] as System.Nullable<System.Int32>;
                entity.DivisionCode = (thisReader["DivisionCode"] == DBNull.Value) ? null : thisReader["DivisionCode"].ToString();
                entity.Id_Auto = (System.Int32)thisReader["Id_Auto"];
                entity.MessageId = (System.String)thisReader["MessageId"];
                entity.Service = (System.Int32)thisReader["Service"];
            }
            else
            {
                throw new Exception("Data not found");
            }
            thisReader.Close();
            return (entity);
        }

        public IList<ServiceDocument> ReadServiceDocumentList()
        {
            SqlConnection thisConn = null;
            List<ServiceDocument> allEntities = new List<ServiceDocument>();

            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.Connection = thisConn;
            selectCommand.CommandText = "SELECT [Id] , [Title] , [DocCode] , [DocSubType] , [DocPerson] , [DocSerie] , [DocNumber] , [DocDate] , [ValidityPeriod] , [WhoSign] , [ListCount] , [CopyCount] , [DivisionCode] , [Id_Auto] , [MessageId] , [Service] FROM [dbo].[ServiceDocument]";
            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            while (thisReader.Read())
            {
                ServiceDocument entity = new ServiceDocument();

                entity.Id = (thisReader["Id"] == DBNull.Value) ? null : thisReader["Id"].ToString();
                entity.Title = (thisReader["Title"] == DBNull.Value) ? null : thisReader["Title"].ToString();
                entity.DocCode = (thisReader["DocCode"] == DBNull.Value) ? null : thisReader["DocCode"].ToString();
                entity.DocSubType = (thisReader["DocSubType"] == DBNull.Value) ? null : thisReader["DocSubType"].ToString();
                entity.DocPerson = (thisReader["DocPerson"] == DBNull.Value) ? null : thisReader["DocPerson"].ToString();
                entity.DocSerie = (thisReader["DocSerie"] == DBNull.Value) ? null : thisReader["DocSerie"].ToString();
                entity.DocNumber = (thisReader["DocNumber"] == DBNull.Value) ? null : thisReader["DocNumber"].ToString();
                entity.DocDate = thisReader["DocDate"] as System.Nullable<System.DateTime>;
                entity.ValidityPeriod = (thisReader["ValidityPeriod"] == DBNull.Value) ? null : thisReader["ValidityPeriod"].ToString();
                entity.WhoSign = (thisReader["WhoSign"] == DBNull.Value) ? null : thisReader["WhoSign"].ToString();
                entity.ListCount = thisReader["ListCount"] as System.Nullable<System.Int32>;
                entity.CopyCount = thisReader["CopyCount"] as System.Nullable<System.Int32>;
                entity.DivisionCode = (thisReader["DivisionCode"] == DBNull.Value) ? null : thisReader["DivisionCode"].ToString();
                entity.Id_Auto = (System.Int32)thisReader["Id_Auto"];
                entity.MessageId = (System.String)thisReader["MessageId"];
                entity.Service = (System.Int32)thisReader["Service"];

                allEntities.Add(entity);
            }
            thisReader.Close();
            return allEntities;
        }

        public ServiceDocument CreateServiceDocument(ServiceDocument newentity)
        {
            ServiceDocument createdEntity = null;
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                SqlCommand createCommand = new SqlCommand();
                createCommand.Connection = thisConn;
                createCommand.CommandText = "INSERT INTO [dbo].[ServiceDocument] ([Id] , [Title] , [DocCode] , [DocSubType] , [DocPerson] , [DocSerie] , [DocNumber] , [DocDate] , [ValidityPeriod] , [WhoSign] , [ListCount] , [CopyCount] , [DivisionCode] , [MessageId] , [Service]) VALUES (@Id , @Title , @DocCode , @DocSubType , @DocPerson , @DocSerie , @DocNumber , @DocDate , @ValidityPeriod , @WhoSign , @ListCount , @CopyCount , @DivisionCode , @MessageId , @Service) SELECT [Id] , [Title] , [DocCode] , [DocSubType] , [DocPerson] , [DocSerie] , [DocNumber] , [DocDate] , [ValidityPeriod] , [WhoSign] , [ListCount] , [CopyCount] , [DivisionCode] , [Id_Auto] , [MessageId] , [Service] FROM [dbo].[ServiceDocument] WHERE [Id_Auto] = SCOPE_IDENTITY()";
                createCommand.Parameters.AddWithValue("@Id", (newentity.Id == null) ? (object)DBNull.Value : newentity.Id);
                createCommand.Parameters.AddWithValue("@Title", (newentity.Title == null) ? (object)DBNull.Value : newentity.Title);
                createCommand.Parameters.AddWithValue("@DocCode", (newentity.DocCode == null) ? (object)DBNull.Value : newentity.DocCode);
                createCommand.Parameters.AddWithValue("@DocSubType", (newentity.DocSubType == null) ? (object)DBNull.Value : newentity.DocSubType);
                createCommand.Parameters.AddWithValue("@DocPerson", (newentity.DocPerson == null) ? (object)DBNull.Value : newentity.DocPerson);
                createCommand.Parameters.AddWithValue("@DocSerie", (newentity.DocSerie == null) ? (object)DBNull.Value : newentity.DocSerie);
                createCommand.Parameters.AddWithValue("@DocNumber", (newentity.DocNumber == null) ? (object)DBNull.Value : newentity.DocNumber);
                createCommand.Parameters.AddWithValue("@DocDate", (newentity.DocDate == null) ? (object)DBNull.Value : newentity.DocDate);
                createCommand.Parameters.AddWithValue("@ValidityPeriod", (newentity.ValidityPeriod == null) ? (object)DBNull.Value : newentity.ValidityPeriod);
                createCommand.Parameters.AddWithValue("@WhoSign", (newentity.WhoSign == null) ? (object)DBNull.Value : newentity.WhoSign);
                createCommand.Parameters.AddWithValue("@ListCount", (newentity.ListCount == null) ? (object)DBNull.Value : newentity.ListCount);
                createCommand.Parameters.AddWithValue("@CopyCount", (newentity.CopyCount == null) ? (object)DBNull.Value : newentity.CopyCount);
                createCommand.Parameters.AddWithValue("@DivisionCode", (newentity.DivisionCode == null) ? (object)DBNull.Value : newentity.DivisionCode);
                createCommand.Parameters.AddWithValue("@Id_Auto", newentity.Id_Auto);
                createCommand.Parameters.AddWithValue("@MessageId", newentity.MessageId);
                createCommand.Parameters.AddWithValue("@Service", newentity.Service);


                SqlDataReader thisReader = createCommand.ExecuteReader(CommandBehavior.CloseConnection);
                if (thisReader.Read())
                {
                    createdEntity = new ServiceDocument();

                    createdEntity.Id = (thisReader["Id"] == DBNull.Value) ? null : thisReader["Id"].ToString();
                    createdEntity.Title = (thisReader["Title"] == DBNull.Value) ? null : thisReader["Title"].ToString();
                    createdEntity.DocCode = (thisReader["DocCode"] == DBNull.Value) ? null : thisReader["DocCode"].ToString();
                    createdEntity.DocSubType = (thisReader["DocSubType"] == DBNull.Value) ? null : thisReader["DocSubType"].ToString();
                    createdEntity.DocPerson = (thisReader["DocPerson"] == DBNull.Value) ? null : thisReader["DocPerson"].ToString();
                    createdEntity.DocSerie = (thisReader["DocSerie"] == DBNull.Value) ? null : thisReader["DocSerie"].ToString();
                    createdEntity.DocNumber = (thisReader["DocNumber"] == DBNull.Value) ? null : thisReader["DocNumber"].ToString();
                    createdEntity.DocDate = thisReader["DocDate"] as System.Nullable<System.DateTime>;
                    createdEntity.ValidityPeriod = (thisReader["ValidityPeriod"] == DBNull.Value) ? null : thisReader["ValidityPeriod"].ToString();
                    createdEntity.WhoSign = (thisReader["WhoSign"] == DBNull.Value) ? null : thisReader["WhoSign"].ToString();
                    createdEntity.ListCount = thisReader["ListCount"] as System.Nullable<System.Int32>;
                    createdEntity.CopyCount = thisReader["CopyCount"] as System.Nullable<System.Int32>;
                    createdEntity.DivisionCode = (thisReader["DivisionCode"] == DBNull.Value) ? null : thisReader["DivisionCode"].ToString();
                    createdEntity.Id_Auto = (System.Int32)thisReader["Id_Auto"];
                    createdEntity.MessageId = (System.String)thisReader["MessageId"];
                    createdEntity.Service = (System.Int32)thisReader["Service"];
                }
                else
                {
                    throw new Exception("Data not found");
                }
                return createdEntity;
            }
            finally
            {
                thisConn.Dispose();
            }
        }

        public void DeleteServiceDocument(System.Int32 Id_Auto)
        {
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                SqlCommand deleteCommand = new SqlCommand();
                deleteCommand.Connection = thisConn;
                deleteCommand.CommandText = "DELETE FROM [dbo].[ServiceDocument] WHERE [Id_Auto] = @Id_Auto";
                deleteCommand.Parameters.AddWithValue("@Id_Auto", Id_Auto);
                deleteCommand.ExecuteNonQuery();
            }
            finally
            {
                thisConn.Dispose();
            }

        }


        public void UpdateServiceDocument(ServiceDocument updateServiceDocument)
        {
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                SqlCommand updateCommand = new SqlCommand();
                updateCommand.Connection = thisConn;
                updateCommand.CommandText = "UPDATE [dbo].[ServiceDocument] SET [Id] = @Id , [Title] = @Title , [DocCode] = @DocCode , [DocSubType] = @DocSubType , [DocPerson] = @DocPerson , [DocSerie] = @DocSerie , [DocNumber] = @DocNumber , [DocDate] = @DocDate , [ValidityPeriod] = @ValidityPeriod , [WhoSign] = @WhoSign , [ListCount] = @ListCount , [CopyCount] = @CopyCount , [DivisionCode] = @DivisionCode , [MessageId] = @MessageId , [Service] = @Service WHERE [Id_Auto] = @Id_Auto";

                //add new field values
                updateCommand.Parameters.AddWithValue("@Id", (updateServiceDocument.Id == null) ? (object)DBNull.Value : updateServiceDocument.Id);
                updateCommand.Parameters.AddWithValue("@Title", (updateServiceDocument.Title == null) ? (object)DBNull.Value : updateServiceDocument.Title);
                updateCommand.Parameters.AddWithValue("@DocCode", (updateServiceDocument.DocCode == null) ? (object)DBNull.Value : updateServiceDocument.DocCode);
                updateCommand.Parameters.AddWithValue("@DocSubType", (updateServiceDocument.DocSubType == null) ? (object)DBNull.Value : updateServiceDocument.DocSubType);
                updateCommand.Parameters.AddWithValue("@DocPerson", (updateServiceDocument.DocPerson == null) ? (object)DBNull.Value : updateServiceDocument.DocPerson);
                updateCommand.Parameters.AddWithValue("@DocSerie", (updateServiceDocument.DocSerie == null) ? (object)DBNull.Value : updateServiceDocument.DocSerie);
                updateCommand.Parameters.AddWithValue("@DocNumber", (updateServiceDocument.DocNumber == null) ? (object)DBNull.Value : updateServiceDocument.DocNumber);
                updateCommand.Parameters.AddWithValue("@DocDate", (updateServiceDocument.DocDate == null) ? (object)DBNull.Value : updateServiceDocument.DocDate);
                updateCommand.Parameters.AddWithValue("@ValidityPeriod", (updateServiceDocument.ValidityPeriod == null) ? (object)DBNull.Value : updateServiceDocument.ValidityPeriod);
                updateCommand.Parameters.AddWithValue("@WhoSign", (updateServiceDocument.WhoSign == null) ? (object)DBNull.Value : updateServiceDocument.WhoSign);
                updateCommand.Parameters.AddWithValue("@ListCount", (updateServiceDocument.ListCount == null) ? (object)DBNull.Value : updateServiceDocument.ListCount);
                updateCommand.Parameters.AddWithValue("@CopyCount", (updateServiceDocument.CopyCount == null) ? (object)DBNull.Value : updateServiceDocument.CopyCount);
                updateCommand.Parameters.AddWithValue("@DivisionCode", (updateServiceDocument.DivisionCode == null) ? (object)DBNull.Value : updateServiceDocument.DivisionCode);
                updateCommand.Parameters.AddWithValue("@MessageId", updateServiceDocument.MessageId);
                updateCommand.Parameters.AddWithValue("@Service", updateServiceDocument.Service);

                updateCommand.Parameters.AddWithValue("@Id_Auto", updateServiceDocument.Id_Auto);

                updateCommand.ExecuteNonQuery();
            }
            finally
            {
                thisConn.Dispose();
            }
        }
        public IList<File> Id_AutoOfServiceDocumentToServiceDocumentOfFile(System.Int32 ServiceDocument)
        {
            SqlConnection thisConn = null;
            List<File> allEntities = new List<File>();

            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.Connection = thisConn;
            selectCommand.CommandText = "SELECT [Id] , [Title] , [FileName] , [MimeType] , [IsFileInStore] , [FileIdInStore] , [StoreName] , [Id_Auto] , [MessageId] , [ServiceDocument] FROM [dbo].[File] WHERE [ServiceDocument] = @ServiceDocument";

            selectCommand.Parameters.AddWithValue("@ServiceDocument", ServiceDocument);

            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            while (thisReader.Read())
            {
                File entity = new File();

                entity.Id = (thisReader["Id"] == DBNull.Value) ? null : thisReader["Id"].ToString();
                entity.Title = (thisReader["Title"] == DBNull.Value) ? null : thisReader["Title"].ToString();
                entity.FileName = (thisReader["FileName"] == DBNull.Value) ? null : thisReader["FileName"].ToString();
                entity.MimeType = (thisReader["MimeType"] == DBNull.Value) ? null : thisReader["MimeType"].ToString();
                entity.IsFileInStore = thisReader["IsFileInStore"] as System.Nullable<System.Boolean>;
                entity.FileIdInStore = (thisReader["FileIdInStore"] == DBNull.Value) ? null : thisReader["FileIdInStore"].ToString();
                entity.StoreName = (thisReader["StoreName"] == DBNull.Value) ? null : thisReader["StoreName"].ToString();
                entity.Id_Auto = (System.Int32)thisReader["Id_Auto"];
                entity.MessageId = (System.String)thisReader["MessageId"];
                entity.ServiceDocument = (System.Int32)thisReader["ServiceDocument"];

                allEntities.Add(entity);
            }
            thisReader.Close();
            return allEntities;
        }
    }
    /// <summary>
    /// All the methods for retrieving, updating and deleting data are implemented in this class file.
    /// The samples below show the finder and specific finder method for Entity1.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("SPSF", "4.1")]
    public class ServiceHeaderEntityService : CoordinateV5Service
    {
        public ServiceHeader ReadServiceHeaderItem(System.Int32 Id)
        {
            SqlConnection thisConn = null;
            ServiceHeader entity = null;

            entity = new ServiceHeader();
            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.CommandText = "SELECT [Title] , [FromOrgCode] , [ToOrgCode] , [MessageId] , [RelatesTo] , [ServiceNumber] , [RequestDateTime] , [Id] FROM [dbo].[ServiceHeader] WHERE [Id] = @Id";
            selectCommand.Parameters.AddWithValue("@Id", Id);

            selectCommand.Connection = thisConn;
            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            if (thisReader.Read())
            {
                entity.Title = (thisReader["Title"] == DBNull.Value) ? null : thisReader["Title"].ToString();
                entity.FromOrgCode = (thisReader["FromOrgCode"] == DBNull.Value) ? null : thisReader["FromOrgCode"].ToString();
                entity.ToOrgCode = (thisReader["ToOrgCode"] == DBNull.Value) ? null : thisReader["ToOrgCode"].ToString();
                entity.MessageId = (System.String)thisReader["MessageId"];
                entity.RelatesTo = (thisReader["RelatesTo"] == DBNull.Value) ? null : thisReader["RelatesTo"].ToString();
                entity.ServiceNumber = (thisReader["ServiceNumber"] == DBNull.Value) ? null : thisReader["ServiceNumber"].ToString();
                entity.RequestDateTime = (System.DateTime)thisReader["RequestDateTime"];
                entity.Id = (System.Int32)thisReader["Id"];
            }
            else
            {
                throw new Exception("Data not found");
            }
            thisReader.Close();
            return (entity);
        }

        public IList<ServiceHeader> ReadServiceHeaderList()
        {
            SqlConnection thisConn = null;
            List<ServiceHeader> allEntities = new List<ServiceHeader>();

            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.Connection = thisConn;
            selectCommand.CommandText = "SELECT [Title] , [FromOrgCode] , [ToOrgCode] , [MessageId] , [RelatesTo] , [ServiceNumber] , [RequestDateTime] , [Id] FROM [dbo].[ServiceHeader]";
            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            while (thisReader.Read())
            {
                ServiceHeader entity = new ServiceHeader();

                entity.Title = (thisReader["Title"] == DBNull.Value) ? null : thisReader["Title"].ToString();
                entity.FromOrgCode = (thisReader["FromOrgCode"] == DBNull.Value) ? null : thisReader["FromOrgCode"].ToString();
                entity.ToOrgCode = (thisReader["ToOrgCode"] == DBNull.Value) ? null : thisReader["ToOrgCode"].ToString();
                entity.MessageId = (System.String)thisReader["MessageId"];
                entity.RelatesTo = (thisReader["RelatesTo"] == DBNull.Value) ? null : thisReader["RelatesTo"].ToString();
                entity.ServiceNumber = (thisReader["ServiceNumber"] == DBNull.Value) ? null : thisReader["ServiceNumber"].ToString();
                entity.RequestDateTime = (System.DateTime)thisReader["RequestDateTime"];
                entity.Id = (System.Int32)thisReader["Id"];

                allEntities.Add(entity);
            }
            thisReader.Close();
            return allEntities;
        }

        public ServiceHeader CreateServiceHeader(ServiceHeader newentity)
        {
            ServiceHeader createdEntity = null;
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                SqlCommand createCommand = new SqlCommand();
                createCommand.Connection = thisConn;
                createCommand.CommandText = "INSERT INTO [dbo].[ServiceHeader] ([Title] , [FromOrgCode] , [ToOrgCode] , [MessageId] , [RelatesTo] , [ServiceNumber] , [RequestDateTime]) VALUES (@Title , @FromOrgCode , @ToOrgCode , @MessageId , @RelatesTo , @ServiceNumber , @RequestDateTime) SELECT [Title] , [FromOrgCode] , [ToOrgCode] , [MessageId] , [RelatesTo] , [ServiceNumber] , [RequestDateTime] , [Id] FROM [dbo].[ServiceHeader] WHERE [Id] = SCOPE_IDENTITY()";
                createCommand.Parameters.AddWithValue("@Title", (newentity.Title == null) ? (object)DBNull.Value : newentity.Title);
                createCommand.Parameters.AddWithValue("@FromOrgCode", (newentity.FromOrgCode == null) ? (object)DBNull.Value : newentity.FromOrgCode);
                createCommand.Parameters.AddWithValue("@ToOrgCode", (newentity.ToOrgCode == null) ? (object)DBNull.Value : newentity.ToOrgCode);
                createCommand.Parameters.AddWithValue("@MessageId", newentity.MessageId);
                createCommand.Parameters.AddWithValue("@RelatesTo", (newentity.RelatesTo == null) ? (object)DBNull.Value : newentity.RelatesTo);
                createCommand.Parameters.AddWithValue("@ServiceNumber", (newentity.ServiceNumber == null) ? (object)DBNull.Value : newentity.ServiceNumber);
                createCommand.Parameters.AddWithValue("@RequestDateTime", newentity.RequestDateTime);
                createCommand.Parameters.AddWithValue("@Id", newentity.Id);


                SqlDataReader thisReader = createCommand.ExecuteReader(CommandBehavior.CloseConnection);
                if (thisReader.Read())
                {
                    createdEntity = new ServiceHeader();

                    createdEntity.Title = (thisReader["Title"] == DBNull.Value) ? null : thisReader["Title"].ToString();
                    createdEntity.FromOrgCode = (thisReader["FromOrgCode"] == DBNull.Value) ? null : thisReader["FromOrgCode"].ToString();
                    createdEntity.ToOrgCode = (thisReader["ToOrgCode"] == DBNull.Value) ? null : thisReader["ToOrgCode"].ToString();
                    createdEntity.MessageId = (System.String)thisReader["MessageId"];
                    createdEntity.RelatesTo = (thisReader["RelatesTo"] == DBNull.Value) ? null : thisReader["RelatesTo"].ToString();
                    createdEntity.ServiceNumber = (thisReader["ServiceNumber"] == DBNull.Value) ? null : thisReader["ServiceNumber"].ToString();
                    createdEntity.RequestDateTime = (System.DateTime)thisReader["RequestDateTime"];
                    createdEntity.Id = (System.Int32)thisReader["Id"];
                }
                else
                {
                    throw new Exception("Data not found");
                }
                return createdEntity;
            }
            finally
            {
                thisConn.Dispose();
            }
        }

        public void DeleteServiceHeader(System.Int32 Id)
        {
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                SqlCommand deleteCommand = new SqlCommand();
                deleteCommand.Connection = thisConn;
                deleteCommand.CommandText = "DELETE FROM [dbo].[ServiceHeader] WHERE [Id] = @Id";
                deleteCommand.Parameters.AddWithValue("@Id", Id);
                deleteCommand.ExecuteNonQuery();
            }
            finally
            {
                thisConn.Dispose();
            }

        }


        public void UpdateServiceHeader(ServiceHeader updateServiceHeader)
        {
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                SqlCommand updateCommand = new SqlCommand();
                updateCommand.Connection = thisConn;
                updateCommand.CommandText = "UPDATE [dbo].[ServiceHeader] SET [Title] = @Title , [FromOrgCode] = @FromOrgCode , [ToOrgCode] = @ToOrgCode , [MessageId] = @MessageId , [RelatesTo] = @RelatesTo , [ServiceNumber] = @ServiceNumber , [RequestDateTime] = @RequestDateTime WHERE [Id] = @Id";

                //add new field values
                updateCommand.Parameters.AddWithValue("@Title", (updateServiceHeader.Title == null) ? (object)DBNull.Value : updateServiceHeader.Title);
                updateCommand.Parameters.AddWithValue("@FromOrgCode", (updateServiceHeader.FromOrgCode == null) ? (object)DBNull.Value : updateServiceHeader.FromOrgCode);
                updateCommand.Parameters.AddWithValue("@ToOrgCode", (updateServiceHeader.ToOrgCode == null) ? (object)DBNull.Value : updateServiceHeader.ToOrgCode);
                updateCommand.Parameters.AddWithValue("@MessageId", updateServiceHeader.MessageId);
                updateCommand.Parameters.AddWithValue("@RelatesTo", (updateServiceHeader.RelatesTo == null) ? (object)DBNull.Value : updateServiceHeader.RelatesTo);
                updateCommand.Parameters.AddWithValue("@ServiceNumber", (updateServiceHeader.ServiceNumber == null) ? (object)DBNull.Value : updateServiceHeader.ServiceNumber);
                updateCommand.Parameters.AddWithValue("@RequestDateTime", updateServiceHeader.RequestDateTime);

                updateCommand.Parameters.AddWithValue("@Id", updateServiceHeader.Id);

                updateCommand.ExecuteNonQuery();
            }
            finally
            {
                thisConn.Dispose();
            }
        }
        public IList<Request> IdOfServiceHeaderToServiceHeaderOfRequest(System.Int32 ServiceHeader)
        {
            SqlConnection thisConn = null;
            List<Request> allEntities = new List<Request>();

            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.Connection = thisConn;
            selectCommand.CommandText = "SELECT [Id] , [Title] , [MessageId] , [DeclarantRequestAccount] , [DeclarantRequestContact] , [TrusteeRequestContact] , [ServiceProperties] , [Service] , [ServiceHeader] FROM [dbo].[Request] WHERE [ServiceHeader] = @ServiceHeader";

            selectCommand.Parameters.AddWithValue("@ServiceHeader", ServiceHeader);

            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            while (thisReader.Read())
            {
                Request entity = new Request();

                entity.Id = (System.Int32)thisReader["Id"];
                entity.Title = (System.String)thisReader["Title"];
                entity.MessageId = (System.String)thisReader["MessageId"];
                entity.DeclarantRequestAccount = thisReader["DeclarantRequestAccount"] as System.Nullable<System.Int32>;
                entity.DeclarantRequestContact = thisReader["DeclarantRequestContact"] as System.Nullable<System.Int32>;
                entity.TrusteeRequestContact = thisReader["TrusteeRequestContact"] as System.Nullable<System.Int32>;
                entity.ServiceProperties = (System.Int32)thisReader["ServiceProperties"];
                entity.Service = (System.Int32)thisReader["Service"];
                entity.ServiceHeader = (System.Int32)thisReader["ServiceHeader"];

                allEntities.Add(entity);
            }
            thisReader.Close();
            return allEntities;
        }
    }
    /// <summary>
    /// All the methods for retrieving, updating and deleting data are implemented in this class file.
    /// The samples below show the finder and specific finder method for Entity1.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("SPSF", "4.1")]
    public class ServicePropertiesEntityService : CoordinateV5Service
    {
        public ServiceProperties ReadServicePropertiesItem(System.Int32 Id)
        {
            SqlConnection thisConn = null;
            ServiceProperties entity = null;

            entity = new ServiceProperties();
            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.CommandText = "SELECT [Title] , [delete] , [name] , [other] , [pr_pereoformlenie] , [pr_pereoformlenie_2] , [pr_pereoformlenie_3] , [pr_pereoformlenie_4] , [pr_pereoformlenie_5] , [pr_pereoformlenie_6] , [pr_pereoformlenie_7] , [Id] , [MessageId] FROM [dbo].[ServiceProperties] WHERE [Id] = @Id";
            selectCommand.Parameters.AddWithValue("@Id", Id);

            selectCommand.Connection = thisConn;
            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            if (thisReader.Read())
            {
                entity.Title = (System.String)thisReader["Title"];
                entity.delete = thisReader["delete"] as System.Nullable<System.Int32>;
                entity.name = (thisReader["name"] == DBNull.Value) ? null : thisReader["name"].ToString();
                entity.other = (thisReader["other"] == DBNull.Value) ? null : thisReader["other"].ToString();
                entity.pr_pereoformlenie = thisReader["pr_pereoformlenie"] as System.Nullable<System.Boolean>;
                entity.pr_pereoformlenie_2 = thisReader["pr_pereoformlenie_2"] as System.Nullable<System.Boolean>;
                entity.pr_pereoformlenie_3 = thisReader["pr_pereoformlenie_3"] as System.Nullable<System.Boolean>;
                entity.pr_pereoformlenie_4 = thisReader["pr_pereoformlenie_4"] as System.Nullable<System.Boolean>;
                entity.pr_pereoformlenie_5 = thisReader["pr_pereoformlenie_5"] as System.Nullable<System.Boolean>;
                entity.pr_pereoformlenie_6 = thisReader["pr_pereoformlenie_6"] as System.Nullable<System.Boolean>;
                entity.pr_pereoformlenie_7 = thisReader["pr_pereoformlenie_7"] as System.Nullable<System.Boolean>;
                entity.Id = (System.Int32)thisReader["Id"];
                entity.MessageId = (System.String)thisReader["MessageId"];
            }
            else
            {
                throw new Exception("Data not found");
            }
            thisReader.Close();
            return (entity);
        }

        public IList<ServiceProperties> ReadServicePropertiesList()
        {
            SqlConnection thisConn = null;
            List<ServiceProperties> allEntities = new List<ServiceProperties>();

            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.Connection = thisConn;
            selectCommand.CommandText = "SELECT [Title] , [delete] , [name] , [other] , [pr_pereoformlenie] , [pr_pereoformlenie_2] , [pr_pereoformlenie_3] , [pr_pereoformlenie_4] , [pr_pereoformlenie_5] , [pr_pereoformlenie_6] , [pr_pereoformlenie_7] , [Id] , [MessageId] FROM [dbo].[ServiceProperties]";
            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            while (thisReader.Read())
            {
                ServiceProperties entity = new ServiceProperties();

                entity.Title = (System.String)thisReader["Title"];
                entity.delete = thisReader["delete"] as System.Nullable<System.Int32>;
                entity.name = (thisReader["name"] == DBNull.Value) ? null : thisReader["name"].ToString();
                entity.other = (thisReader["other"] == DBNull.Value) ? null : thisReader["other"].ToString();
                entity.pr_pereoformlenie = thisReader["pr_pereoformlenie"] as System.Nullable<System.Boolean>;
                entity.pr_pereoformlenie_2 = thisReader["pr_pereoformlenie_2"] as System.Nullable<System.Boolean>;
                entity.pr_pereoformlenie_3 = thisReader["pr_pereoformlenie_3"] as System.Nullable<System.Boolean>;
                entity.pr_pereoformlenie_4 = thisReader["pr_pereoformlenie_4"] as System.Nullable<System.Boolean>;
                entity.pr_pereoformlenie_5 = thisReader["pr_pereoformlenie_5"] as System.Nullable<System.Boolean>;
                entity.pr_pereoformlenie_6 = thisReader["pr_pereoformlenie_6"] as System.Nullable<System.Boolean>;
                entity.pr_pereoformlenie_7 = thisReader["pr_pereoformlenie_7"] as System.Nullable<System.Boolean>;
                entity.Id = (System.Int32)thisReader["Id"];
                entity.MessageId = (System.String)thisReader["MessageId"];

                allEntities.Add(entity);
            }
            thisReader.Close();
            return allEntities;
        }

        public ServiceProperties CreateServiceProperties(ServiceProperties newentity)
        {
            ServiceProperties createdEntity = null;
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                SqlCommand createCommand = new SqlCommand();
                createCommand.Connection = thisConn;
                createCommand.CommandText = "INSERT INTO [dbo].[ServiceProperties] ([Title] , [delete] , [name] , [other] , [pr_pereoformlenie] , [pr_pereoformlenie_2] , [pr_pereoformlenie_3] , [pr_pereoformlenie_4] , [pr_pereoformlenie_5] , [pr_pereoformlenie_6] , [pr_pereoformlenie_7] , [MessageId]) VALUES (@Title , @delete , @name , @other , @pr_pereoformlenie , @pr_pereoformlenie_2 , @pr_pereoformlenie_3 , @pr_pereoformlenie_4 , @pr_pereoformlenie_5 , @pr_pereoformlenie_6 , @pr_pereoformlenie_7 , @MessageId) SELECT [Title] , [delete] , [name] , [other] , [pr_pereoformlenie] , [pr_pereoformlenie_2] , [pr_pereoformlenie_3] , [pr_pereoformlenie_4] , [pr_pereoformlenie_5] , [pr_pereoformlenie_6] , [pr_pereoformlenie_7] , [Id] , [MessageId] FROM [dbo].[ServiceProperties] WHERE [Id] = SCOPE_IDENTITY()";
                createCommand.Parameters.AddWithValue("@Title", newentity.Title);
                createCommand.Parameters.AddWithValue("@delete", (newentity.delete == null) ? (object)DBNull.Value : newentity.delete);
                createCommand.Parameters.AddWithValue("@name", (newentity.name == null) ? (object)DBNull.Value : newentity.name);
                createCommand.Parameters.AddWithValue("@other", (newentity.other == null) ? (object)DBNull.Value : newentity.other);
                createCommand.Parameters.AddWithValue("@pr_pereoformlenie", (newentity.pr_pereoformlenie == null) ? (object)DBNull.Value : newentity.pr_pereoformlenie);
                createCommand.Parameters.AddWithValue("@pr_pereoformlenie_2", (newentity.pr_pereoformlenie_2 == null) ? (object)DBNull.Value : newentity.pr_pereoformlenie_2);
                createCommand.Parameters.AddWithValue("@pr_pereoformlenie_3", (newentity.pr_pereoformlenie_3 == null) ? (object)DBNull.Value : newentity.pr_pereoformlenie_3);
                createCommand.Parameters.AddWithValue("@pr_pereoformlenie_4", (newentity.pr_pereoformlenie_4 == null) ? (object)DBNull.Value : newentity.pr_pereoformlenie_4);
                createCommand.Parameters.AddWithValue("@pr_pereoformlenie_5", (newentity.pr_pereoformlenie_5 == null) ? (object)DBNull.Value : newentity.pr_pereoformlenie_5);
                createCommand.Parameters.AddWithValue("@pr_pereoformlenie_6", (newentity.pr_pereoformlenie_6 == null) ? (object)DBNull.Value : newentity.pr_pereoformlenie_6);
                createCommand.Parameters.AddWithValue("@pr_pereoformlenie_7", (newentity.pr_pereoformlenie_7 == null) ? (object)DBNull.Value : newentity.pr_pereoformlenie_7);
                createCommand.Parameters.AddWithValue("@Id", newentity.Id);
                createCommand.Parameters.AddWithValue("@MessageId", newentity.MessageId);


                SqlDataReader thisReader = createCommand.ExecuteReader(CommandBehavior.CloseConnection);
                if (thisReader.Read())
                {
                    createdEntity = new ServiceProperties();

                    createdEntity.Title = (System.String)thisReader["Title"];
                    createdEntity.delete = thisReader["delete"] as System.Nullable<System.Int32>;
                    createdEntity.name = (thisReader["name"] == DBNull.Value) ? null : thisReader["name"].ToString();
                    createdEntity.other = (thisReader["other"] == DBNull.Value) ? null : thisReader["other"].ToString();
                    createdEntity.pr_pereoformlenie = thisReader["pr_pereoformlenie"] as System.Nullable<System.Boolean>;
                    createdEntity.pr_pereoformlenie_2 = thisReader["pr_pereoformlenie_2"] as System.Nullable<System.Boolean>;
                    createdEntity.pr_pereoformlenie_3 = thisReader["pr_pereoformlenie_3"] as System.Nullable<System.Boolean>;
                    createdEntity.pr_pereoformlenie_4 = thisReader["pr_pereoformlenie_4"] as System.Nullable<System.Boolean>;
                    createdEntity.pr_pereoformlenie_5 = thisReader["pr_pereoformlenie_5"] as System.Nullable<System.Boolean>;
                    createdEntity.pr_pereoformlenie_6 = thisReader["pr_pereoformlenie_6"] as System.Nullable<System.Boolean>;
                    createdEntity.pr_pereoformlenie_7 = thisReader["pr_pereoformlenie_7"] as System.Nullable<System.Boolean>;
                    createdEntity.Id = (System.Int32)thisReader["Id"];
                    createdEntity.MessageId = (System.String)thisReader["MessageId"];
                }
                else
                {
                    throw new Exception("Data not found");
                }
                return createdEntity;
            }
            finally
            {
                thisConn.Dispose();
            }
        }

        public void DeleteServiceProperties(System.Int32 Id)
        {
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                SqlCommand deleteCommand = new SqlCommand();
                deleteCommand.Connection = thisConn;
                deleteCommand.CommandText = "DELETE FROM [dbo].[ServiceProperties] WHERE [Id] = @Id";
                deleteCommand.Parameters.AddWithValue("@Id", Id);
                deleteCommand.ExecuteNonQuery();
            }
            finally
            {
                thisConn.Dispose();
            }

        }


        public void UpdateServiceProperties(ServiceProperties updateServiceProperties)
        {
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                SqlCommand updateCommand = new SqlCommand();
                updateCommand.Connection = thisConn;
                updateCommand.CommandText = "UPDATE [dbo].[ServiceProperties] SET [Title] = @Title , [delete] = @delete , [name] = @name , [other] = @other , [pr_pereoformlenie] = @pr_pereoformlenie , [pr_pereoformlenie_2] = @pr_pereoformlenie_2 , [pr_pereoformlenie_3] = @pr_pereoformlenie_3 , [pr_pereoformlenie_4] = @pr_pereoformlenie_4 , [pr_pereoformlenie_5] = @pr_pereoformlenie_5 , [pr_pereoformlenie_6] = @pr_pereoformlenie_6 , [pr_pereoformlenie_7] = @pr_pereoformlenie_7 , [MessageId] = @MessageId WHERE [Id] = @Id";

                //add new field values
                updateCommand.Parameters.AddWithValue("@Title", updateServiceProperties.Title);
                updateCommand.Parameters.AddWithValue("@delete", (updateServiceProperties.delete == null) ? (object)DBNull.Value : updateServiceProperties.delete);
                updateCommand.Parameters.AddWithValue("@name", (updateServiceProperties.name == null) ? (object)DBNull.Value : updateServiceProperties.name);
                updateCommand.Parameters.AddWithValue("@other", (updateServiceProperties.other == null) ? (object)DBNull.Value : updateServiceProperties.other);
                updateCommand.Parameters.AddWithValue("@pr_pereoformlenie", (updateServiceProperties.pr_pereoformlenie == null) ? (object)DBNull.Value : updateServiceProperties.pr_pereoformlenie);
                updateCommand.Parameters.AddWithValue("@pr_pereoformlenie_2", (updateServiceProperties.pr_pereoformlenie_2 == null) ? (object)DBNull.Value : updateServiceProperties.pr_pereoformlenie_2);
                updateCommand.Parameters.AddWithValue("@pr_pereoformlenie_3", (updateServiceProperties.pr_pereoformlenie_3 == null) ? (object)DBNull.Value : updateServiceProperties.pr_pereoformlenie_3);
                updateCommand.Parameters.AddWithValue("@pr_pereoformlenie_4", (updateServiceProperties.pr_pereoformlenie_4 == null) ? (object)DBNull.Value : updateServiceProperties.pr_pereoformlenie_4);
                updateCommand.Parameters.AddWithValue("@pr_pereoformlenie_5", (updateServiceProperties.pr_pereoformlenie_5 == null) ? (object)DBNull.Value : updateServiceProperties.pr_pereoformlenie_5);
                updateCommand.Parameters.AddWithValue("@pr_pereoformlenie_6", (updateServiceProperties.pr_pereoformlenie_6 == null) ? (object)DBNull.Value : updateServiceProperties.pr_pereoformlenie_6);
                updateCommand.Parameters.AddWithValue("@pr_pereoformlenie_7", (updateServiceProperties.pr_pereoformlenie_7 == null) ? (object)DBNull.Value : updateServiceProperties.pr_pereoformlenie_7);
                updateCommand.Parameters.AddWithValue("@MessageId", updateServiceProperties.MessageId);

                updateCommand.Parameters.AddWithValue("@Id", updateServiceProperties.Id);

                updateCommand.ExecuteNonQuery();
            }
            finally
            {
                thisConn.Dispose();
            }
        }
        public IList<Request> IdOfServicePropertiesToServicePropertiesOfRequest(System.Int32 ServiceProperties)
        {
            SqlConnection thisConn = null;
            List<Request> allEntities = new List<Request>();

            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.Connection = thisConn;
            selectCommand.CommandText = "SELECT [Id] , [Title] , [MessageId] , [DeclarantRequestAccount] , [DeclarantRequestContact] , [TrusteeRequestContact] , [ServiceProperties] , [Service] , [ServiceHeader] FROM [dbo].[Request] WHERE [ServiceProperties] = @ServiceProperties";

            selectCommand.Parameters.AddWithValue("@ServiceProperties", ServiceProperties);

            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            while (thisReader.Read())
            {
                Request entity = new Request();

                entity.Id = (System.Int32)thisReader["Id"];
                entity.Title = (System.String)thisReader["Title"];
                entity.MessageId = (System.String)thisReader["MessageId"];
                entity.DeclarantRequestAccount = thisReader["DeclarantRequestAccount"] as System.Nullable<System.Int32>;
                entity.DeclarantRequestContact = thisReader["DeclarantRequestContact"] as System.Nullable<System.Int32>;
                entity.TrusteeRequestContact = thisReader["TrusteeRequestContact"] as System.Nullable<System.Int32>;
                entity.ServiceProperties = (System.Int32)thisReader["ServiceProperties"];
                entity.Service = (System.Int32)thisReader["Service"];
                entity.ServiceHeader = (System.Int32)thisReader["ServiceHeader"];

                allEntities.Add(entity);
            }
            thisReader.Close();
            return allEntities;
        }
        public IEnumerable<taxi_info> IdOfServicePropertiesToServicePropertiesOftaxi_info(System.Int32 ServiceProperties)
        {
            SqlConnection thisConn = null;
            List<taxi_info> allEntities = new List<taxi_info>();

            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.Connection = thisConn;
            selectCommand.CommandText = "SELECT [Title] , [blankno] , [brand] , [brandname] , [color] , [color_2] , [color_number] , [color_yellow] , [condition] , [date_ran] , [decision] , [declinereason] , [details] , [doc] , [gps] , [licensedate] , [licensenum] , [lizdetails] , [model] , [name] , [num] , [num2] , [number_ran] , [owner] , [taxi_info_old] , [taxometr] , [todate] , [year] , [Id] , [MessageId] , [ServiceProperties] FROM [dbo].[taxi_info] WHERE [ServiceProperties] = @ServiceProperties";

            selectCommand.Parameters.AddWithValue("@ServiceProperties", ServiceProperties);

            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            while (thisReader.Read())
            {
                taxi_info entity = new taxi_info();

                entity.Title = (thisReader["Title"] == DBNull.Value) ? null : thisReader["Title"].ToString();
                entity.blankno = (thisReader["blankno"] == DBNull.Value) ? null : thisReader["blankno"].ToString();
                entity.brand = (thisReader["brand"] == DBNull.Value) ? null : thisReader["brand"].ToString();
                entity.brandname = (thisReader["brandname"] == DBNull.Value) ? null : thisReader["brandname"].ToString();
                entity.color = (thisReader["color"] == DBNull.Value) ? null : thisReader["color"].ToString();
                entity.color_2 = (thisReader["color_2"] == DBNull.Value) ? null : thisReader["color_2"].ToString();
                entity.color_number = thisReader["color_number"] as System.Nullable<System.Boolean>;
                entity.color_yellow = thisReader["color_yellow"] as System.Nullable<System.Boolean>;
                entity.condition = thisReader["condition"] as System.Nullable<System.Int32>;
                entity.date_ran = (thisReader["date_ran"] == DBNull.Value) ? null : thisReader["date_ran"].ToString();
                entity.decision = thisReader["decision"] as System.Nullable<System.Boolean>;
                entity.declinereason = (thisReader["declinereason"] == DBNull.Value) ? null : thisReader["declinereason"].ToString();
                entity.details = (thisReader["details"] == DBNull.Value) ? null : thisReader["details"].ToString();
                entity.doc = thisReader["doc"] as System.Nullable<System.Int32>;
                entity.gps = thisReader["gps"] as System.Nullable<System.Boolean>;
                entity.licensedate = (thisReader["licensedate"] == DBNull.Value) ? null : thisReader["licensedate"].ToString();
                entity.licensenum = (thisReader["licensenum"] == DBNull.Value) ? null : thisReader["licensenum"].ToString();
                entity.lizdetails = (thisReader["lizdetails"] == DBNull.Value) ? null : thisReader["lizdetails"].ToString();
                entity.model = (thisReader["model"] == DBNull.Value) ? null : thisReader["model"].ToString();
                entity.name = (thisReader["name"] == DBNull.Value) ? null : thisReader["name"].ToString();
                entity.num = (thisReader["num"] == DBNull.Value) ? null : thisReader["num"].ToString();
                entity.num2 = (thisReader["num2"] == DBNull.Value) ? null : thisReader["num2"].ToString();
                entity.number_ran = (thisReader["number_ran"] == DBNull.Value) ? null : thisReader["number_ran"].ToString();
                entity.owner = (thisReader["owner"] == DBNull.Value) ? null : thisReader["owner"].ToString();
                entity.taxi_info_old = (thisReader["taxi_info_old"] == DBNull.Value) ? null : thisReader["taxi_info_old"].ToString();
                entity.taxometr = thisReader["taxometr"] as System.Nullable<System.Boolean>;
                entity.todate = thisReader["todate"] as System.Nullable<System.DateTime>;
                entity.year = thisReader["year"] as System.Nullable<System.Int32>;
                entity.Id = (System.Int32)thisReader["Id"];
                entity.MessageId = (System.String)thisReader["MessageId"];
                entity.ServiceProperties = (System.Int32)thisReader["ServiceProperties"];

                allEntities.Add(entity);
            }
            thisReader.Close();
            return allEntities;
        }
    }
    /// <summary>
    /// All the methods for retrieving, updating and deleting data are implemented in this class file.
    /// The samples below show the finder and specific finder method for Entity1.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("SPSF", "4.1")]
    public class taxi_infoEntityService : CoordinateV5Service
    {
        public taxi_info Readtaxi_infoItem(System.Int32 Id)
        {
            SqlConnection thisConn = null;
            taxi_info entity = null;

            entity = new taxi_info();
            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.CommandText = "SELECT [Title] , [blankno] , [brand] , [brandname] , [color] , [color_2] , [color_number] , [color_yellow] , [condition] , [date_ran] , [decision] , [declinereason] , [details] , [doc] , [gps] , [licensedate] , [licensenum] , [lizdetails] , [model] , [name] , [num] , [num2] , [number_ran] , [owner] , [taxi_info_old] , [taxometr] , [todate] , [year] , [Id] , [MessageId] , [ServiceProperties] FROM [dbo].[taxi_info] WHERE [Id] = @Id";
            selectCommand.Parameters.AddWithValue("@Id", Id);

            selectCommand.Connection = thisConn;
            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            if (thisReader.Read())
            {
                entity.Title = (thisReader["Title"] == DBNull.Value) ? null : thisReader["Title"].ToString();
                entity.blankno = (thisReader["blankno"] == DBNull.Value) ? null : thisReader["blankno"].ToString();
                entity.brand = (thisReader["brand"] == DBNull.Value) ? null : thisReader["brand"].ToString();
                entity.brandname = (thisReader["brandname"] == DBNull.Value) ? null : thisReader["brandname"].ToString();
                entity.color = (thisReader["color"] == DBNull.Value) ? null : thisReader["color"].ToString();
                entity.color_2 = (thisReader["color_2"] == DBNull.Value) ? null : thisReader["color_2"].ToString();
                entity.color_number = thisReader["color_number"] as System.Nullable<System.Boolean>;
                entity.color_yellow = thisReader["color_yellow"] as System.Nullable<System.Boolean>;
                entity.condition = thisReader["condition"] as System.Nullable<System.Int32>;
                entity.date_ran = (thisReader["date_ran"] == DBNull.Value) ? null : thisReader["date_ran"].ToString();
                entity.decision = thisReader["decision"] as System.Nullable<System.Boolean>;
                entity.declinereason = (thisReader["declinereason"] == DBNull.Value) ? null : thisReader["declinereason"].ToString();
                entity.details = (thisReader["details"] == DBNull.Value) ? null : thisReader["details"].ToString();
                entity.doc = thisReader["doc"] as System.Nullable<System.Int32>;
                entity.gps = thisReader["gps"] as System.Nullable<System.Boolean>;
                entity.licensedate = (thisReader["licensedate"] == DBNull.Value) ? null : thisReader["licensedate"].ToString();
                entity.licensenum = (thisReader["licensenum"] == DBNull.Value) ? null : thisReader["licensenum"].ToString();
                entity.lizdetails = (thisReader["lizdetails"] == DBNull.Value) ? null : thisReader["lizdetails"].ToString();
                entity.model = (thisReader["model"] == DBNull.Value) ? null : thisReader["model"].ToString();
                entity.name = (thisReader["name"] == DBNull.Value) ? null : thisReader["name"].ToString();
                entity.num = (thisReader["num"] == DBNull.Value) ? null : thisReader["num"].ToString();
                entity.num2 = (thisReader["num2"] == DBNull.Value) ? null : thisReader["num2"].ToString();
                entity.number_ran = (thisReader["number_ran"] == DBNull.Value) ? null : thisReader["number_ran"].ToString();
                entity.owner = (thisReader["owner"] == DBNull.Value) ? null : thisReader["owner"].ToString();
                entity.taxi_info_old = (thisReader["taxi_info_old"] == DBNull.Value) ? null : thisReader["taxi_info_old"].ToString();
                entity.taxometr = thisReader["taxometr"] as System.Nullable<System.Boolean>;
                entity.todate = thisReader["todate"] as System.Nullable<System.DateTime>;
                entity.year = thisReader["year"] as System.Nullable<System.Int32>;
                entity.Id = (System.Int32)thisReader["Id"];
                entity.MessageId = (System.String)thisReader["MessageId"];
                entity.ServiceProperties = (System.Int32)thisReader["ServiceProperties"];
            }
            else
            {
                throw new Exception("Data not found");
            }
            thisReader.Close();
            return (entity);
        }

        public IEnumerable<taxi_info> Readtaxi_infoList()
        {
            SqlConnection thisConn = null;
            List<taxi_info> allEntities = new List<taxi_info>();

            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.Connection = thisConn;
            selectCommand.CommandText = "SELECT [Title] , [blankno] , [brand] , [brandname] , [color] , [color_2] , [color_number] , [color_yellow] , [condition] , [date_ran] , [decision] , [declinereason] , [details] , [doc] , [gps] , [licensedate] , [licensenum] , [lizdetails] , [model] , [name] , [num] , [num2] , [number_ran] , [owner] , [taxi_info_old] , [taxometr] , [todate] , [year] , [Id] , [MessageId] , [ServiceProperties] FROM [dbo].[taxi_info]";
            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            while (thisReader.Read())
            {
                taxi_info entity = new taxi_info();

                entity.Title = (thisReader["Title"] == DBNull.Value) ? null : thisReader["Title"].ToString();
                entity.blankno = (thisReader["blankno"] == DBNull.Value) ? null : thisReader["blankno"].ToString();
                entity.brand = (thisReader["brand"] == DBNull.Value) ? null : thisReader["brand"].ToString();
                entity.brandname = (thisReader["brandname"] == DBNull.Value) ? null : thisReader["brandname"].ToString();
                entity.color = (thisReader["color"] == DBNull.Value) ? null : thisReader["color"].ToString();
                entity.color_2 = (thisReader["color_2"] == DBNull.Value) ? null : thisReader["color_2"].ToString();
                entity.color_number = thisReader["color_number"] as System.Nullable<System.Boolean>;
                entity.color_yellow = thisReader["color_yellow"] as System.Nullable<System.Boolean>;
                entity.condition = thisReader["condition"] as System.Nullable<System.Int32>;
                entity.date_ran = (thisReader["date_ran"] == DBNull.Value) ? null : thisReader["date_ran"].ToString();
                entity.decision = thisReader["decision"] as System.Nullable<System.Boolean>;
                entity.declinereason = (thisReader["declinereason"] == DBNull.Value) ? null : thisReader["declinereason"].ToString();
                entity.details = (thisReader["details"] == DBNull.Value) ? null : thisReader["details"].ToString();
                entity.doc = thisReader["doc"] as System.Nullable<System.Int32>;
                entity.gps = thisReader["gps"] as System.Nullable<System.Boolean>;
                entity.licensedate = (thisReader["licensedate"] == DBNull.Value) ? null : thisReader["licensedate"].ToString();
                entity.licensenum = (thisReader["licensenum"] == DBNull.Value) ? null : thisReader["licensenum"].ToString();
                entity.lizdetails = (thisReader["lizdetails"] == DBNull.Value) ? null : thisReader["lizdetails"].ToString();
                entity.model = (thisReader["model"] == DBNull.Value) ? null : thisReader["model"].ToString();
                entity.name = (thisReader["name"] == DBNull.Value) ? null : thisReader["name"].ToString();
                entity.num = (thisReader["num"] == DBNull.Value) ? null : thisReader["num"].ToString();
                entity.num2 = (thisReader["num2"] == DBNull.Value) ? null : thisReader["num2"].ToString();
                entity.number_ran = (thisReader["number_ran"] == DBNull.Value) ? null : thisReader["number_ran"].ToString();
                entity.owner = (thisReader["owner"] == DBNull.Value) ? null : thisReader["owner"].ToString();
                entity.taxi_info_old = (thisReader["taxi_info_old"] == DBNull.Value) ? null : thisReader["taxi_info_old"].ToString();
                entity.taxometr = thisReader["taxometr"] as System.Nullable<System.Boolean>;
                entity.todate = thisReader["todate"] as System.Nullable<System.DateTime>;
                entity.year = thisReader["year"] as System.Nullable<System.Int32>;
                entity.Id = (System.Int32)thisReader["Id"];
                entity.MessageId = (System.String)thisReader["MessageId"];
                entity.ServiceProperties = (System.Int32)thisReader["ServiceProperties"];

                allEntities.Add(entity);
            }
            thisReader.Close();
            return allEntities;
        }

        public taxi_info Createtaxi_info(taxi_info newentity)
        {
            taxi_info createdEntity = null;
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                SqlCommand createCommand = new SqlCommand();
                createCommand.Connection = thisConn;
                createCommand.CommandText = "INSERT INTO [dbo].[taxi_info] ([Title] , [blankno] , [brand] , [brandname] , [color] , [color_2] , [color_number] , [color_yellow] , [condition] , [date_ran] , [decision] , [declinereason] , [details] , [doc] , [gps] , [licensedate] , [licensenum] , [lizdetails] , [model] , [name] , [num] , [num2] , [number_ran] , [owner] , [taxi_info_old] , [taxometr] , [todate] , [year] , [MessageId] , [ServiceProperties]) VALUES (@Title , @blankno , @brand , @brandname , @color , @color_2 , @color_number , @color_yellow , @condition , @date_ran , @decision , @declinereason , @details , @doc , @gps , @licensedate , @licensenum , @lizdetails , @model , @name , @num , @num2 , @number_ran , @owner , @taxi_info_old , @taxometr , @todate , @year , @MessageId , @ServiceProperties) SELECT [Title] , [blankno] , [brand] , [brandname] , [color] , [color_2] , [color_number] , [color_yellow] , [condition] , [date_ran] , [decision] , [declinereason] , [details] , [doc] , [gps] , [licensedate] , [licensenum] , [lizdetails] , [model] , [name] , [num] , [num2] , [number_ran] , [owner] , [taxi_info_old] , [taxometr] , [todate] , [year] , [Id] , [MessageId] , [ServiceProperties] FROM [dbo].[taxi_info] WHERE [Id] = SCOPE_IDENTITY()";
                createCommand.Parameters.AddWithValue("@Title", (newentity.Title == null) ? (object)DBNull.Value : newentity.Title);
                createCommand.Parameters.AddWithValue("@blankno", (newentity.blankno == null) ? (object)DBNull.Value : newentity.blankno);
                createCommand.Parameters.AddWithValue("@brand", (newentity.brand == null) ? (object)DBNull.Value : newentity.brand);
                createCommand.Parameters.AddWithValue("@brandname", (newentity.brandname == null) ? (object)DBNull.Value : newentity.brandname);
                createCommand.Parameters.AddWithValue("@color", (newentity.color == null) ? (object)DBNull.Value : newentity.color);
                createCommand.Parameters.AddWithValue("@color_2", (newentity.color_2 == null) ? (object)DBNull.Value : newentity.color_2);
                createCommand.Parameters.AddWithValue("@color_number", (newentity.color_number == null) ? (object)DBNull.Value : newentity.color_number);
                createCommand.Parameters.AddWithValue("@color_yellow", (newentity.color_yellow == null) ? (object)DBNull.Value : newentity.color_yellow);
                createCommand.Parameters.AddWithValue("@condition", (newentity.condition == null) ? (object)DBNull.Value : newentity.condition);
                createCommand.Parameters.AddWithValue("@date_ran", (newentity.date_ran == null) ? (object)DBNull.Value : newentity.date_ran);
                createCommand.Parameters.AddWithValue("@decision", (newentity.decision == null) ? (object)DBNull.Value : newentity.decision);
                createCommand.Parameters.AddWithValue("@declinereason", (newentity.declinereason == null) ? (object)DBNull.Value : newentity.declinereason);
                createCommand.Parameters.AddWithValue("@details", (newentity.details == null) ? (object)DBNull.Value : newentity.details);
                createCommand.Parameters.AddWithValue("@doc", (newentity.doc == null) ? (object)DBNull.Value : newentity.doc);
                createCommand.Parameters.AddWithValue("@gps", (newentity.gps == null) ? (object)DBNull.Value : newentity.gps);
                createCommand.Parameters.AddWithValue("@licensedate", (newentity.licensedate == null) ? (object)DBNull.Value : newentity.licensedate);
                createCommand.Parameters.AddWithValue("@licensenum", (newentity.licensenum == null) ? (object)DBNull.Value : newentity.licensenum);
                createCommand.Parameters.AddWithValue("@lizdetails", (newentity.lizdetails == null) ? (object)DBNull.Value : newentity.lizdetails);
                createCommand.Parameters.AddWithValue("@model", (newentity.model == null) ? (object)DBNull.Value : newentity.model);
                createCommand.Parameters.AddWithValue("@name", (newentity.name == null) ? (object)DBNull.Value : newentity.name);
                createCommand.Parameters.AddWithValue("@num", (newentity.num == null) ? (object)DBNull.Value : newentity.num);
                createCommand.Parameters.AddWithValue("@num2", (newentity.num2 == null) ? (object)DBNull.Value : newentity.num2);
                createCommand.Parameters.AddWithValue("@number_ran", (newentity.number_ran == null) ? (object)DBNull.Value : newentity.number_ran);
                createCommand.Parameters.AddWithValue("@owner", (newentity.owner == null) ? (object)DBNull.Value : newentity.owner);
                createCommand.Parameters.AddWithValue("@taxi_info_old", (newentity.taxi_info_old == null) ? (object)DBNull.Value : newentity.taxi_info_old);
                createCommand.Parameters.AddWithValue("@taxometr", (newentity.taxometr == null) ? (object)DBNull.Value : newentity.taxometr);
                createCommand.Parameters.AddWithValue("@todate", (newentity.todate == null) ? (object)DBNull.Value : newentity.todate);
                createCommand.Parameters.AddWithValue("@year", (newentity.year == null) ? (object)DBNull.Value : newentity.year);
                createCommand.Parameters.AddWithValue("@Id", newentity.Id);
                createCommand.Parameters.AddWithValue("@MessageId", newentity.MessageId);
                createCommand.Parameters.AddWithValue("@ServiceProperties", newentity.ServiceProperties);


                SqlDataReader thisReader = createCommand.ExecuteReader(CommandBehavior.CloseConnection);
                if (thisReader.Read())
                {
                    createdEntity = new taxi_info();

                    createdEntity.Title = (thisReader["Title"] == DBNull.Value) ? null : thisReader["Title"].ToString();
                    createdEntity.blankno = (thisReader["blankno"] == DBNull.Value) ? null : thisReader["blankno"].ToString();
                    createdEntity.brand = (thisReader["brand"] == DBNull.Value) ? null : thisReader["brand"].ToString();
                    createdEntity.brandname = (thisReader["brandname"] == DBNull.Value) ? null : thisReader["brandname"].ToString();
                    createdEntity.color = (thisReader["color"] == DBNull.Value) ? null : thisReader["color"].ToString();
                    createdEntity.color_2 = (thisReader["color_2"] == DBNull.Value) ? null : thisReader["color_2"].ToString();
                    createdEntity.color_number = thisReader["color_number"] as System.Nullable<System.Boolean>;
                    createdEntity.color_yellow = thisReader["color_yellow"] as System.Nullable<System.Boolean>;
                    createdEntity.condition = thisReader["condition"] as System.Nullable<System.Int32>;
                    createdEntity.date_ran = (thisReader["date_ran"] == DBNull.Value) ? null : thisReader["date_ran"].ToString();
                    createdEntity.decision = thisReader["decision"] as System.Nullable<System.Boolean>;
                    createdEntity.declinereason = (thisReader["declinereason"] == DBNull.Value) ? null : thisReader["declinereason"].ToString();
                    createdEntity.details = (thisReader["details"] == DBNull.Value) ? null : thisReader["details"].ToString();
                    createdEntity.doc = thisReader["doc"] as System.Nullable<System.Int32>;
                    createdEntity.gps = thisReader["gps"] as System.Nullable<System.Boolean>;
                    createdEntity.licensedate = (thisReader["licensedate"] == DBNull.Value) ? null : thisReader["licensedate"].ToString();
                    createdEntity.licensenum = (thisReader["licensenum"] == DBNull.Value) ? null : thisReader["licensenum"].ToString();
                    createdEntity.lizdetails = (thisReader["lizdetails"] == DBNull.Value) ? null : thisReader["lizdetails"].ToString();
                    createdEntity.model = (thisReader["model"] == DBNull.Value) ? null : thisReader["model"].ToString();
                    createdEntity.name = (thisReader["name"] == DBNull.Value) ? null : thisReader["name"].ToString();
                    createdEntity.num = (thisReader["num"] == DBNull.Value) ? null : thisReader["num"].ToString();
                    createdEntity.num2 = (thisReader["num2"] == DBNull.Value) ? null : thisReader["num2"].ToString();
                    createdEntity.number_ran = (thisReader["number_ran"] == DBNull.Value) ? null : thisReader["number_ran"].ToString();
                    createdEntity.owner = (thisReader["owner"] == DBNull.Value) ? null : thisReader["owner"].ToString();
                    createdEntity.taxi_info_old = (thisReader["taxi_info_old"] == DBNull.Value) ? null : thisReader["taxi_info_old"].ToString();
                    createdEntity.taxometr = thisReader["taxometr"] as System.Nullable<System.Boolean>;
                    createdEntity.todate = thisReader["todate"] as System.Nullable<System.DateTime>;
                    createdEntity.year = thisReader["year"] as System.Nullable<System.Int32>;
                    createdEntity.Id = (System.Int32)thisReader["Id"];
                    createdEntity.MessageId = (System.String)thisReader["MessageId"];
                    createdEntity.ServiceProperties = (System.Int32)thisReader["ServiceProperties"];
                }
                else
                {
                    throw new Exception("Data not found");
                }
                return createdEntity;
            }
            finally
            {
                thisConn.Dispose();
            }
        }

        public void Deletetaxi_info(System.Int32 Id)
        {
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                SqlCommand deleteCommand = new SqlCommand();
                deleteCommand.Connection = thisConn;
                deleteCommand.CommandText = "DELETE FROM [dbo].[taxi_info] WHERE [Id] = @Id";
                deleteCommand.Parameters.AddWithValue("@Id", Id);
                deleteCommand.ExecuteNonQuery();
            }
            finally
            {
                thisConn.Dispose();
            }

        }


        public void Updatetaxi_info(taxi_info updatetaxi_info)
        {
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                SqlCommand updateCommand = new SqlCommand();
                updateCommand.Connection = thisConn;
                updateCommand.CommandText = "UPDATE [dbo].[taxi_info] SET [Title] = @Title , [blankno] = @blankno , [brand] = @brand , [brandname] = @brandname , [color] = @color , [color_2] = @color_2 , [color_number] = @color_number , [color_yellow] = @color_yellow , [condition] = @condition , [date_ran] = @date_ran , [decision] = @decision , [declinereason] = @declinereason , [details] = @details , [doc] = @doc , [gps] = @gps , [licensedate] = @licensedate , [licensenum] = @licensenum , [lizdetails] = @lizdetails , [model] = @model , [name] = @name , [num] = @num , [num2] = @num2 , [number_ran] = @number_ran , [owner] = @owner , [taxi_info_old] = @taxi_info_old , [taxometr] = @taxometr , [todate] = @todate , [year] = @year , [MessageId] = @MessageId , [ServiceProperties] = @ServiceProperties WHERE [Id] = @Id";

                //add new field values
                updateCommand.Parameters.AddWithValue("@Title", (updatetaxi_info.Title == null) ? (object)DBNull.Value : updatetaxi_info.Title);
                updateCommand.Parameters.AddWithValue("@blankno", (updatetaxi_info.blankno == null) ? (object)DBNull.Value : updatetaxi_info.blankno);
                updateCommand.Parameters.AddWithValue("@brand", (updatetaxi_info.brand == null) ? (object)DBNull.Value : updatetaxi_info.brand);
                updateCommand.Parameters.AddWithValue("@brandname", (updatetaxi_info.brandname == null) ? (object)DBNull.Value : updatetaxi_info.brandname);
                updateCommand.Parameters.AddWithValue("@color", (updatetaxi_info.color == null) ? (object)DBNull.Value : updatetaxi_info.color);
                updateCommand.Parameters.AddWithValue("@color_2", (updatetaxi_info.color_2 == null) ? (object)DBNull.Value : updatetaxi_info.color_2);
                updateCommand.Parameters.AddWithValue("@color_number", (updatetaxi_info.color_number == null) ? (object)DBNull.Value : updatetaxi_info.color_number);
                updateCommand.Parameters.AddWithValue("@color_yellow", (updatetaxi_info.color_yellow == null) ? (object)DBNull.Value : updatetaxi_info.color_yellow);
                updateCommand.Parameters.AddWithValue("@condition", (updatetaxi_info.condition == null) ? (object)DBNull.Value : updatetaxi_info.condition);
                updateCommand.Parameters.AddWithValue("@date_ran", (updatetaxi_info.date_ran == null) ? (object)DBNull.Value : updatetaxi_info.date_ran);
                updateCommand.Parameters.AddWithValue("@decision", (updatetaxi_info.decision == null) ? (object)DBNull.Value : updatetaxi_info.decision);
                updateCommand.Parameters.AddWithValue("@declinereason", (updatetaxi_info.declinereason == null) ? (object)DBNull.Value : updatetaxi_info.declinereason);
                updateCommand.Parameters.AddWithValue("@details", (updatetaxi_info.details == null) ? (object)DBNull.Value : updatetaxi_info.details);
                updateCommand.Parameters.AddWithValue("@doc", (updatetaxi_info.doc == null) ? (object)DBNull.Value : updatetaxi_info.doc);
                updateCommand.Parameters.AddWithValue("@gps", (updatetaxi_info.gps == null) ? (object)DBNull.Value : updatetaxi_info.gps);
                updateCommand.Parameters.AddWithValue("@licensedate", (updatetaxi_info.licensedate == null) ? (object)DBNull.Value : updatetaxi_info.licensedate);
                updateCommand.Parameters.AddWithValue("@licensenum", (updatetaxi_info.licensenum == null) ? (object)DBNull.Value : updatetaxi_info.licensenum);
                updateCommand.Parameters.AddWithValue("@lizdetails", (updatetaxi_info.lizdetails == null) ? (object)DBNull.Value : updatetaxi_info.lizdetails);
                updateCommand.Parameters.AddWithValue("@model", (updatetaxi_info.model == null) ? (object)DBNull.Value : updatetaxi_info.model);
                updateCommand.Parameters.AddWithValue("@name", (updatetaxi_info.name == null) ? (object)DBNull.Value : updatetaxi_info.name);
                updateCommand.Parameters.AddWithValue("@num", (updatetaxi_info.num == null) ? (object)DBNull.Value : updatetaxi_info.num);
                updateCommand.Parameters.AddWithValue("@num2", (updatetaxi_info.num2 == null) ? (object)DBNull.Value : updatetaxi_info.num2);
                updateCommand.Parameters.AddWithValue("@number_ran", (updatetaxi_info.number_ran == null) ? (object)DBNull.Value : updatetaxi_info.number_ran);
                updateCommand.Parameters.AddWithValue("@owner", (updatetaxi_info.owner == null) ? (object)DBNull.Value : updatetaxi_info.owner);
                updateCommand.Parameters.AddWithValue("@taxi_info_old", (updatetaxi_info.taxi_info_old == null) ? (object)DBNull.Value : updatetaxi_info.taxi_info_old);
                updateCommand.Parameters.AddWithValue("@taxometr", (updatetaxi_info.taxometr == null) ? (object)DBNull.Value : updatetaxi_info.taxometr);
                updateCommand.Parameters.AddWithValue("@todate", (updatetaxi_info.todate == null) ? (object)DBNull.Value : updatetaxi_info.todate);
                updateCommand.Parameters.AddWithValue("@year", (updatetaxi_info.year == null) ? (object)DBNull.Value : updatetaxi_info.year);
                updateCommand.Parameters.AddWithValue("@MessageId", updatetaxi_info.MessageId);
                updateCommand.Parameters.AddWithValue("@ServiceProperties", updatetaxi_info.ServiceProperties);

                updateCommand.Parameters.AddWithValue("@Id", updatetaxi_info.Id);

                updateCommand.ExecuteNonQuery();
            }
            finally
            {
                thisConn.Dispose();
            }
        }
    }
}

