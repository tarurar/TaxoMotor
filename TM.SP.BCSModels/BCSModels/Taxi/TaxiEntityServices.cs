// <copyright file="TaxiEntityServices.cs" company="Armd">
// Copyright Armd. All rights reserved.
// </copyright>
// <author>SPDEV\developer</author>
// <date>2014-09-30 12:37:24Z</date>
// <auto-generated>
//   Generated with SharePoint Software Factory 4.1
// </auto-generated>

using System.CodeDom.Compiler;
using Microsoft.BusinessData.MetadataModel;
using Microsoft.BusinessData.Runtime;
// ReSharper disable once CheckNamespace


namespace TM.SP.BCSModels.Taxi
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlClient;
    using Microsoft.BusinessData.SystemSpecific;

    using Utils;
    using Helpers;

    // Base class to share connection string retrieval for all entities
    [GeneratedCode("SPSF", "4.1")]
    public class TaxiService : IContextProperty
    {
        public IExecutionContext ExecutionContext
        {
            get;
            set;
        }

        public ILobSystemInstance LobSystemInstance
        {
            get;
            set;
        }

        public IMethodInstance MethodInstance
        {
            get;
            set;
        }

        protected SqlConnection getSqlConnection()
        {
            var secureStoreAppId = BCS.GetLobSystemProperty(LobSystemInstance, "SecureStoreAppId");

            var cBuilder = new SqlConnectionStringBuilder()
            {
                DataSource     = BCS.GetLobSystemProperty(LobSystemInstance, "DBServerName"),
                InitialCatalog = BCS.GetLobSystemProperty(LobSystemInstance, "DBName"),
                UserID         = Security.GetSecureStoreUserNameCredential(secureStoreAppId),
                Password       = Security.GetSecureStorePasswordCredential(secureStoreAppId)
            };

            return new SqlConnection(cBuilder.ConnectionString);
        }
    }

    /// <summary>
    /// All the methods for retrieving, updating and deleting data are implemented in this class file.
    /// The samples below show the finder and specific finder method for Entity1.
    /// </summary>
    [GeneratedCode("SPSF", "4.1")]
    public partial class LicenseEntityService : TaxiService
    {
        public License ReadLicenseItem(Int32 id)
        {
            var entity = new License();
            var thisConn = getSqlConnection();
            thisConn.Open();
            var selectCommand = new SqlCommand
            {
                CommandText = SqlHelper.LoadSQLStatement("License-ReadItem.sql")
                    
            };
            selectCommand.Parameters.AddWithValue("@Id", id);

            selectCommand.Connection = thisConn;
            var thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            if (thisReader.Read())
            {
                SqlHelper.LicenseFillFromReader(entity, thisReader);
            }
            else
            {
                throw new Exception("Data not found");
            }
            thisReader.Close();
            return (entity);
        }
        public IList<License> ReadLicenseList()
        {
            var allEntities = new List<License>();

            var thisConn = getSqlConnection();
            thisConn.Open();
            var selectCommand = new SqlCommand
            {
                Connection = thisConn,
                CommandText = SqlHelper.LoadSQLStatement("License-ReadAllItems.sql")
            };
            var thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            while (thisReader.Read())
            {
                var entity = new License();
                SqlHelper.LicenseFillFromReader(entity, thisReader);
                allEntities.Add(entity);
            }
            thisReader.Close();
            return allEntities;
        }
        public License CreateLicense(License newentity)
        {
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                var createCommand = new SqlCommand
                {
                    Connection = thisConn,
                    CommandText = SqlHelper.LoadSQLStatement("License-CreateItem.sql")
                };
                SqlHelper.NewLicenseParams(newentity, createCommand.Parameters);

                var thisReader = createCommand.ExecuteReader(CommandBehavior.CloseConnection);
                License createdEntity;
                if (thisReader.Read())
                {
                    createdEntity = new License();
                    SqlHelper.LicenseFillFromReader(createdEntity, thisReader);
                }
                else
                {
                    throw new Exception("Data not found");
                }
                return createdEntity;
            }
            finally
            {
                thisConn.Dispose();
            }
        }
        public void DeleteLicense(Int32 Id)
        {
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                var deleteCommand = new SqlCommand
                {
                    Connection = thisConn,
                    CommandText = SqlHelper.LoadSQLStatement("License-DeletItem.sql")
                };
                deleteCommand.Parameters.AddWithValue("@Id", Id);
                deleteCommand.ExecuteNonQuery();
            }
            finally
            {
                thisConn.Dispose();
            }

        }
        public void UpdateLicense(License updateLicense)
        {
            SqlConnection thisConn = null;
            try
            {
                thisConn = getSqlConnection();
                thisConn.Open();

                var updateCommand = new SqlCommand
                {
                    Connection = thisConn,
                    CommandText = SqlHelper.LoadSQLStatement("License-UpdateItem.sql")
                };
                SqlHelper.UpdateLicenseParams(updateLicense, updateCommand.Parameters);

                updateCommand.ExecuteNonQuery();
            }
            finally
            {
                thisConn.Dispose();
            }
        }
        public IList<License> IdOfLicenseToParentOfLicense(Nullable<Int32> Parent)
        {
            var allEntities = new List<License>();

            var thisConn = getSqlConnection();
            thisConn.Open();
            var selectCommand = new SqlCommand
            {
                Connection = thisConn,
                CommandText = SqlHelper.LoadSQLStatement("License-ReadItemsByParent.sql")
            };

            selectCommand.Parameters.AddWithValue("@Parent", Parent);

            var thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            while (thisReader.Read())
            {
                var entity = new License();
                SqlHelper.LicenseFillFromReader(entity, thisReader);
                allEntities.Add(entity);
            }
            thisReader.Close();
            return allEntities;
        }
        public IList<License> IdOfLicenseToRootParentOfLicense(Nullable<Int32> RootParent)
        {
            var allEntities = new List<License>();

            var thisConn = getSqlConnection();
            thisConn.Open();
            var selectCommand = new SqlCommand
            {
                Connection = thisConn,
                CommandText = SqlHelper.LoadSQLStatement("License-ReadItemsByRootParent.sql")
            };
            selectCommand.Parameters.AddWithValue("@RootParent", RootParent);

            var thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            while (thisReader.Read())
            {
                var entity = new License();
                SqlHelper.LicenseFillFromReader(entity, thisReader);
                allEntities.Add(entity);
            }
            thisReader.Close();
            return allEntities;
        }
    }
}

