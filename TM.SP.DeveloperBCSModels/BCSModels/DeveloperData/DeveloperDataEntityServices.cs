// <copyright file="DeveloperDataEntityServices.cs" company="Armd">
// Copyright Armd. All rights reserved.
// </copyright>
// <author>SPDEV\developer</author>
// <date>2014-07-11 17:37:37Z</date>
// <auto-generated>
//   Generated with SharePoint Software Factory 4.1
// </auto-generated>
namespace TM.SP.BCSModels.DeveloperData
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Data;
    using System.Data.Sql;
    using System.Data.SqlClient;
    using System.Data.SqlTypes;
    using Microsoft.BusinessData;
    using Microsoft.BusinessData.SystemSpecific;
    using TM.Utils;

    // Base class to share connection string retrieval for all entities
    [System.CodeDom.Compiler.GeneratedCode("SPSF", "4.1")]
    public class DeveloperDataService : IContextProperty
    {
        public Microsoft.BusinessData.Runtime.IExecutionContext ExecutionContext
        {
            get;
            set;
        }

        public Microsoft.BusinessData.MetadataModel.ILobSystemInstance LobSystemInstance
        {
            get;
            set;
        }

        public Microsoft.BusinessData.MetadataModel.IMethodInstance MethodInstance
        {
            get;
            set;
        }
        protected SqlConnection getSqlConnection()
        {
            var secureStoreAppId = BCS.GetLobSystemProperty(this.LobSystemInstance, "SecureStoreAppId");

            var cBuilder = new SqlConnectionStringBuilder()
            {
                DataSource      = BCS.GetLobSystemProperty(this.LobSystemInstance, "DBServerName"),
                InitialCatalog  = BCS.GetLobSystemProperty(this.LobSystemInstance, "DBName"),
                UserID          = Security.GetSecureStoreUserNameCredential(secureStoreAppId),
                Password        = Security.GetSecureStorePasswordCredential(secureStoreAppId)
            };

            return new SqlConnection(cBuilder.ConnectionString);
        }
    }
    /// <summary>
    /// All the methods for retrieving, updating and deleting data are implemented in this class file.
    /// The samples below show the finder and specific finder method for Entity1.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("SPSF", "4.1")]
    public class DEBUG_DATAEntityService : DeveloperDataService
    {
        public DEBUG_DATA ReadDEBUG_DATAItem(System.Int32 Id)
        {
            SqlConnection thisConn = null;
            DEBUG_DATA entity = null;

            entity = new DEBUG_DATA();
            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.CommandText = "SELECT [Id] , [DATE] , [DATA_STR1] , [DATA_STR2] , [DATA_STR3] , [DATA_STR4] , [DATA_STR5] , [DATA_INT1] , [DATA_INT2] , [DATA_INT3] , [DATA_INT4] , [DATA_INT5] FROM [dbo].[DEBUG_DATA] WHERE [Id] = @Id";
            selectCommand.Parameters.AddWithValue("@Id", Id);

            selectCommand.Connection = thisConn;
            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            if (thisReader.Read())
            {
                entity.Id = (System.Int32)thisReader["Id"];
                entity.DATE = thisReader["DATE"] as System.Nullable<System.DateTime>;
                entity.DATA_STR1 = (thisReader["DATA_STR1"] == DBNull.Value) ? null : thisReader["DATA_STR1"].ToString();
                entity.DATA_STR2 = (thisReader["DATA_STR2"] == DBNull.Value) ? null : thisReader["DATA_STR2"].ToString();
                entity.DATA_STR3 = (thisReader["DATA_STR3"] == DBNull.Value) ? null : thisReader["DATA_STR3"].ToString();
                entity.DATA_STR4 = (thisReader["DATA_STR4"] == DBNull.Value) ? null : thisReader["DATA_STR4"].ToString();
                entity.DATA_STR5 = (thisReader["DATA_STR5"] == DBNull.Value) ? null : thisReader["DATA_STR5"].ToString();
                entity.DATA_INT1 = thisReader["DATA_INT1"] as System.Nullable<System.Int32>;
                entity.DATA_INT2 = thisReader["DATA_INT2"] as System.Nullable<System.Int32>;
                entity.DATA_INT3 = thisReader["DATA_INT3"] as System.Nullable<System.Int32>;
                entity.DATA_INT4 = thisReader["DATA_INT4"] as System.Nullable<System.Int32>;
                entity.DATA_INT5 = thisReader["DATA_INT5"] as System.Nullable<System.Int32>;
            }
            else
            {
                throw new Exception("Data not found");
            }
            thisReader.Close();
            return (entity);
        }

        public IEnumerable<DEBUG_DATA> ReadDEBUG_DATAList()
        {
            SqlConnection thisConn = null;
            List<DEBUG_DATA> allEntities = new List<DEBUG_DATA>();

            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.Connection = thisConn;
            selectCommand.CommandText = "SELECT [Id] , [DATE] , [DATA_STR1] , [DATA_STR2] , [DATA_STR3] , [DATA_STR4] , [DATA_STR5] , [DATA_INT1] , [DATA_INT2] , [DATA_INT3] , [DATA_INT4] , [DATA_INT5] FROM [dbo].[DEBUG_DATA]";
            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            while (thisReader.Read())
            {
                DEBUG_DATA entity = new DEBUG_DATA();

                entity.Id = (System.Int32)thisReader["Id"];
                entity.DATE = thisReader["DATE"] as System.Nullable<System.DateTime>;
                entity.DATA_STR1 = (thisReader["DATA_STR1"] == DBNull.Value) ? null : thisReader["DATA_STR1"].ToString();
                entity.DATA_STR2 = (thisReader["DATA_STR2"] == DBNull.Value) ? null : thisReader["DATA_STR2"].ToString();
                entity.DATA_STR3 = (thisReader["DATA_STR3"] == DBNull.Value) ? null : thisReader["DATA_STR3"].ToString();
                entity.DATA_STR4 = (thisReader["DATA_STR4"] == DBNull.Value) ? null : thisReader["DATA_STR4"].ToString();
                entity.DATA_STR5 = (thisReader["DATA_STR5"] == DBNull.Value) ? null : thisReader["DATA_STR5"].ToString();
                entity.DATA_INT1 = thisReader["DATA_INT1"] as System.Nullable<System.Int32>;
                entity.DATA_INT2 = thisReader["DATA_INT2"] as System.Nullable<System.Int32>;
                entity.DATA_INT3 = thisReader["DATA_INT3"] as System.Nullable<System.Int32>;
                entity.DATA_INT4 = thisReader["DATA_INT4"] as System.Nullable<System.Int32>;
                entity.DATA_INT5 = thisReader["DATA_INT5"] as System.Nullable<System.Int32>;

                allEntities.Add(entity);
            }
            thisReader.Close();
            return allEntities;
        }
    }
    /// <summary>
    /// All the methods for retrieving, updating and deleting data are implemented in this class file.
    /// The samples below show the finder and specific finder method for Entity1.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("SPSF", "4.1")]
    public class ErrorDataEntityService : DeveloperDataService
    {
        public ErrorData ReadErrorDataItem(System.Int32 Id)
        {
            SqlConnection thisConn = null;
            ErrorData entity = null;

            entity = new ErrorData();
            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.CommandText = "SELECT [Id] , [Date] , [Number] , [Severity] , [State] , [Procedure] , [Line] , [Message] , [SystemContext] , [UserContext] FROM [dbo].[ErrorData] WHERE [Id] = @Id";
            selectCommand.Parameters.AddWithValue("@Id", Id);

            selectCommand.Connection = thisConn;
            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            if (thisReader.Read())
            {
                entity.Id = (System.Int32)thisReader["Id"];
                entity.Date = thisReader["Date"] as System.Nullable<System.DateTime>;
                entity.Number = thisReader["Number"] as System.Nullable<System.Int32>;
                entity.Severity = thisReader["Severity"] as System.Nullable<System.Int32>;
                entity.State = thisReader["State"] as System.Nullable<System.Int32>;
                entity.Procedure = (thisReader["Procedure"] == DBNull.Value) ? null : thisReader["Procedure"].ToString();
                entity.Line = thisReader["Line"] as System.Nullable<System.Int32>;
                entity.Message = (thisReader["Message"] == DBNull.Value) ? null : thisReader["Message"].ToString();
                entity.SystemContext = (thisReader["SystemContext"] == DBNull.Value) ? null : thisReader["SystemContext"].ToString();
                entity.UserContext = (thisReader["UserContext"] == DBNull.Value) ? null : thisReader["UserContext"].ToString();
            }
            else
            {
                throw new Exception("Data not found");
            }
            thisReader.Close();
            return (entity);
        }

        public IList<ErrorData> ReadErrorDataList()
        {
            SqlConnection thisConn = null;
            List<ErrorData> allEntities = new List<ErrorData>();

            thisConn = getSqlConnection();
            thisConn.Open();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.Connection = thisConn;
            selectCommand.CommandText = "SELECT [Id] , [Date] , [Number] , [Severity] , [State] , [Procedure] , [Line] , [Message] , [SystemContext] , [UserContext] FROM [dbo].[ErrorData]";
            SqlDataReader thisReader = selectCommand.ExecuteReader(CommandBehavior.CloseConnection);
            while (thisReader.Read())
            {
                ErrorData entity = new ErrorData();

                entity.Id = (System.Int32)thisReader["Id"];
                entity.Date = thisReader["Date"] as System.Nullable<System.DateTime>;
                entity.Number = thisReader["Number"] as System.Nullable<System.Int32>;
                entity.Severity = thisReader["Severity"] as System.Nullable<System.Int32>;
                entity.State = thisReader["State"] as System.Nullable<System.Int32>;
                entity.Procedure = (thisReader["Procedure"] == DBNull.Value) ? null : thisReader["Procedure"].ToString();
                entity.Line = thisReader["Line"] as System.Nullable<System.Int32>;
                entity.Message = (thisReader["Message"] == DBNull.Value) ? null : thisReader["Message"].ToString();
                entity.SystemContext = (thisReader["SystemContext"] == DBNull.Value) ? null : thisReader["SystemContext"].ToString();
                entity.UserContext = (thisReader["UserContext"] == DBNull.Value) ? null : thisReader["UserContext"].ToString();

                allEntities.Add(entity);
            }
            thisReader.Close();
            return allEntities;
        }
    }
}

